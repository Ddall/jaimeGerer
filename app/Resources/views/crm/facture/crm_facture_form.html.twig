{% block content %}

    {{ form_start(form) }}

    <div class="row">
        <div class="col-md-6">
            {{ form_errors(form) }}
            {{ form_row(form.objet) }}
        </div>
        <div class="col-md-6">
            {{ form_row(form.userGestion) }}
        </div>
    </div>
    <div class="row">
        
        <div class="col-md-6">
            {{ form_row(form.analytique) }}
        </div>
        <div class="col-md-6"></div>
    </div>
    <div class="row">
        {% if action == "ajouter" %}
            <div class="col-md-4">
                {{ form_row(form.dateCreation) }}
            </div>
            <div class="col-md-2">
                <p class="center s">
                    <span class="btn btn-xs btn-info" id="changeDateBtn">Revenir dans le passé</span><br/>
                    <i>Vous avez oublié de saisir une facture ? Cliquez pour autoriser l'édition de la date de facture.</i>
                </p>
            </div>
        {% elseif action == "editer" %}
            <div class="col-md-6">
                {{ form_row(form.dateCreation) }}
            </div>
        {% endif %}
        <div class="col-md-6">
            {{ form_row(form.dateValidite) }}
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="typeahead-container">
                <div class="typeahead-field">
                    <span class="typeahead-query">
                        {{ form_row(form.bc_name, {'attr' : {'class' : 'typeahead-bc input-bc-name'}}) }}
                        {{ form_row(form.bonsCommande) }}
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            {{ form_row(form.numBCClient) }}
        </div>
        <div class="col-md-4">
            {{ form_row(form.devis) }}
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="typeahead-container">
                <div class="typeahead-field">
                    <span class="typeahead-query">
                        {{ form_row(form.compte_name, {'attr' : {'class' : 'typeahead-compte input-compte-name'}}) }}
                        {{ form_row(form.compte) }}
                    </span>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="typeahead-container" id="typeahead-container-contact">
                <div class="typeahead-field">
                    <span class="typeahead-query">
                        {{ form_row(form.contact_name, {'attr' : {'class' : 'typeahead-contact'}}) }}
                        {{ form_row(form.contact) }}
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            {{ form_row(form.adresse) }}
            {{ form_row(form.codePostal) }}
        </div>
        <div class="col-md-6">
            {{ form_row(form.ville) }}
            {{ form_row(form.region) }}
            {{ form_row(form.pays) }}
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">

            <ul class="produits" id="collectionContainer" data-prototype="
		 {% filter escape %}
		    	{{ include('crm/produit/crm_produit_form.html.twig', { 'form':  form.produits.vars.prototype }) }}
	     {% endfilter %}">
                {% for produitField in form.produits %}
                    <li>
                        {{ include('crm/produit/crm_produit_form.html.twig', { 'form': produitField }) }}
                    </li>
                {% endfor %}
            </ul>

        </div>
    </div>

    <div class="row">
        <div class="col-md-12" id="facture-calcul-wrapper">
            <hr/>
            <div id="totaux-wrapper">
                {{ form_row(form.sousTotal) }}
                {{ form_row(form.remise) }}
                {{ form_row(form.totalHT) }}
                <div id="facture-taxe-wrapper">
                    {{ form_row(form.taxePercent) }}
                    {{ form_row(form.taxe) }}
                </div>
                <p class="fc-taxe-hidden hidden">Vous ne pouvez pas taxer les produits de type FC.</p>
            </div>
            <div id="totaux-wrapper-belgique" class="hidden">
                {{ form_row(form.facturationBelgePercent) }}
                {{ form_row(form.facturationBelge) }}
            </div>
            <div id="total-wrapper">
                {{ form_row(form.totalTTC) }}
            </div>
            <hr/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            {{ form_row(form.cgv) }}
            {{ form_row(form.description) }}
            <input type="submit" value="Enregistrer" class="btn btn-success"/>
        </div>
    </div>
    {{ form_rest(form) }}
    {{ form_end(form) }}
{% endblock %}

{% block javascripts %}
    <script type="text/javascript">

        // ajoute un lien « add a produit »
        var $addProduitLink = $('<a href="#" class="add_produit_link btn btn-xs btn-success"><span class="glyphicon glyphicon-plus"</a>');
        var $newProduitLi = $('<li></li>').append($addProduitLink);
	    var hasFC = false;
	    var hasPanorama = false;
		var facture_id = "{{ facture.id }}";

        $(document).ready(function() {

            // Récupère le div qui contient la collection de tags
            var collectionHolder = $('ul.produits');
            // ajoute l'ancre « ajouter un tag » et li à la balise ul
            collectionHolder.append($newProduitLi);
            // Récupèrer le nombre de produits pour l'incrémenter et éviter le bug du jeu de suppression
            indexNewCollection = collectionHolder.children().length;

			if(facture_id == ""){
                //nouvelle facture : créer un élément produit vide
				addProduitForm(collectionHolder, $newProduitLi, false);
               
			} else {
                //edition de facture : calculer les totaux
                 $.each($('.produit-tarif'), function( index, value ) {
                    updateMontant(this);
                });
            }


			updateProduitType();

            $addProduitLink.on('click', function(e) {
                // empêche le lien de créer un « # » dans l'URL
                e.preventDefault();
                // ajoute un nouveau formulaire tag (voir le prochain bloc de code)
                addProduitForm(collectionHolder, $newProduitLi, true);

            });

            function addProduitForm(collectionHolder, $newLinkLi, ExecTinymceCommand) {
                // Récupère l'élément ayant l'attribut data-prototype comme expliqué plus tôt
                var prototype = collectionHolder.attr('data-prototype');

                // Remplace '__name__' dans le HTML du prototype par un nombre basé sur Toujours incrémenter pour éviter la duplication des noms/ids
                indexNewCollection++;
                // la longueur de la collection courante
                var newForm = prototype.replace(/__name__/g, indexNewCollection);

                // Affiche le formulaire dans la page dans un li, avant le lien "ajouter un tag"
                var $newFormLi = $('<li></li>').append(newForm);
                $newLinkLi.before($newFormLi);
                // Pour ne pas exécuter la commande dans la 1ère collection de l'ajout
                if (ExecTinymceCommand)
                    tinyMCE.execCommand("mceAddControl", false, $($newFormLi).find('textarea').attr("id"));

                // "unbind" puis "on..." pour éviter la double exécution de l'événement
                $('.remove-button').unbind('click');
                $('.remove-button').on('click', function(e) {
                    // empêche le lien de créer un « # » dans l'URL
                    e.preventDefault();
                    // supprime l'élément li pour le formulaire de tag
                    $(this).parents('li').remove();
                    updatefactureTotaux();
                });

                $('.produit-quantite').unbind('change');
                $('.produit-quantite').change(function() {
                    updateMontant(this);
                    updateTotaux(this);
                });

                $('.produit-tarif').unbind('change');
                $('.produit-tarif').change(function() {
                    updateMontant(this);
                    updateTotaux(this);
                });

                $('.produit-remise').unbind('change');
                $('.produit-remise').change(function() {
                    updateTotaux(this);
                });

                $('.produit-type').unbind('change');
                $('.produit-type').change(function() {
                    updateProduitType();
                });

            }

            $('.remove-button').on('click', function(e) {
                // empêche le lien de créer un « # » dans l'URL
                e.preventDefault();
                // supprime l'élément li pour le formulaire de tag
                $(this).parents('li').remove();
                updatefactureTotaux();

            });

            $('.produit-type').change(function() {
                updateProduitType();
            });

            $('.produit-quantite').change(function() {
                updateMontant(this);
            });

            $('.produit-tarif').change(function() {
                updateMontant(this);
            });

            $('.produit-remise').change(function() {
                updateTotaux(this);
            });

            $('.facture-remise').change(function() {
                updatefactureTotaux();
            });

            $('.facture-taxe-percent').change(function() {
                updateTaxe();
            });

            $('.facturation-belgique-percent').change(function() {
                updateFacturationBelgique();
            });

            function updateProduitType() {

				hasFC = false;
                $.each($('.produit-type'), function(index, value) {
                    var id = $(this).attr('id');
                    var selector = $('#' + id + ' option:selected');
                    if (selector.text() == 'FC') {
                        hasFC = true;
                    }

                    $(".facture-analytique option").filter(function() {
                        //may want to use $.trim in here
                        return $(this).text() == selector.text(); 
                    }).prop('selected', true);
                });

                if (hasFC) {
                    $('.facture-taxe-percent').prop('disabled', true);
                    $('.fc-taxe-hidden').removeClass('hidden');
                    $('.facture-taxe-percent').val(null);
                    $('.facture-taxe').val(null);
                } else {
                    $('.facture-taxe-percent').prop('disabled', false);
                    $('.fc-taxe-hidden').addClass('hidden');
                }

				hasPanorama = false;
                $.each($('.produit-type'), function(index, value) {
                    var id = $(this).attr('id');
                    var selector = $('#' + id + ' option:selected');
                    if (selector.text().toUpperCase() == 'PANORAMA') {
                        hasPanorama = true;
                    }
                });

                if (hasPanorama) {
                    $('#totaux-wrapper').addClass("hidden");
                    $('#totaux-wrapper-belgique').removeClass("hidden");
                    $('#total-wrapper').find('label').text('Total');
										$('.facture-taxe-percent').val(null);
                    $('.facture-taxe').val(null);
                } else {
                    $('#totaux-wrapper').removeClass("hidden");
                    $('#totaux-wrapper-belgique').addClass("hidden");
                    $('#total-wrapper').find('label').text('Total TTC');
					$('.facturation-belgique-percent').val(null);
					$('.facturation-belgique').val(null);
                }

				updatefactureTotaux();


            }

            function updateMontant(element) {
                var quantite = $(element).parents('li').find('.produit-quantite').val();
                quantite = quantite.replace(",", ".");
                $(element).parents('li').find('.produit-quantite').val(quantite);

                var tarif = $(element).parents('li').find('.produit-tarif').val();
                tarif = tarif.replace(",", ".");
                $(element).parents('li').find('.produit-tarif').val(tarif);

                var montant = quantite * tarif;
                if (montant < 0) {
                    montant = 0;
                }
                $(element).parents('li').find('.produit-montant').val(montant.toFixed(2));

                updateTotaux(element);
            };

            function updateTotaux(element) {

                //Total produit
                var remise = $(element).parents('li').find('.produit-remise').val();
                remise = remise.replace(",", ".");
                $(element).parents('li').find('.produit-remise').val(remise);

                var montant = $(element).parents('li').find('.produit-montant').val();
                montant = montant.replace(",", ".");
                $(element).parents('li').find('.produit-montant').val(montant);

                var produitTotal = montant - remise;
                if (produitTotal < 0) {
                    produitTotal = 0;
                }
                $(element).parents('li').find('.produit-total').val(produitTotal.toFixed(2));

                updatefactureTotaux();
            };

            function updatefactureTotaux() {
                //Sous total
                var sousTotal = 0;
                $.each($('.produit-total'), function(index, value) {
                    var val = $(value).val();
                    sousTotal = +sousTotal + + val;
                });
                $('.facture-sous-total').val(sousTotal.toFixed(2));

                //Total HT
                var factureRemise = $('.facture-remise').val();
                factureRemise = factureRemise.replace(",", ".");
                $('.facture-remise').val(factureRemise);

                var totalHT = sousTotal - factureRemise;
                $('.facture-total-ht').val(totalHT.toFixed(2));

                updateTaxe();
				if(hasPanorama){
					  updateFacturationBelgique();
				}
            }

            function updateTaxe() {
                var totalHT = $('.facture-total-ht').val();
                var taxePercent = $('.facture-taxe-percent').val();
                taxePercent = taxePercent.replace(",", ".");
               // $('.facture-taxe-percent').val(taxePercent);

                if (taxePercent != 0) {
                    //Montant Taxe var taxePercent = taxePercent.replace("%", "");
                    var taxeMontant = taxePercent / 100 * totalHT;
                    taxeMontant = taxeMontant.toFixed(2);
                } else {
                    var taxeMontant = "";
                }

                $('.facture-taxe').val(taxeMontant);

                //Total TTC
                var totalTTC = +totalHT + + taxeMontant;
                $('.facture-total-ttc').val(totalTTC.toFixed(2));
            }

            function updateFacturationBelgique() {
                var totalHT = $('.facture-total-ht').val();
                var facturationBelgiquePercent = $('.facturation-belgique-percent').val();
                facturationBelgiquePercent = facturationBelgiquePercent.replace(",", ".");
                $('.facturation-belgique-percent').val(facturationBelgiquePercent);

                if (facturationBelgiquePercent != 0) {
                    //Montant Taxe var facturationBelgiquePercent = taxePercent.replace("%", "");
                    var facturationBelgiqueMontant = facturationBelgiquePercent / 100 * totalHT;
                    facturationBelgiqueMontant = facturationBelgiqueMontant.toFixed(2);
                } else {
                    var facturationBelgiqueMontant = "";
                }

                $('.facturation-belgique').val(facturationBelgiqueMontant);

                //Total TTC
                var totalTTC = +totalHT + + facturationBelgiqueMontant;
                $('.facture-total-ttc').val(totalTTC.toFixed(2));
            }

			$(".dateCreationInput").prop("disabled", true);

			$('.typeahead-compte').typeahead({
					order: "desc",
                    accent: true,
					source: {
						url: Routing.generate("crm_compte_get_liste")
					},
					callback: {
						onClickAfter: function(node, a, item, event) {
							$('.entity-compte').val(item.id);
							changeAddress();
						}
					},
					debug: true

			});

            $('.typeahead-bc').typeahead({
                    order: "desc",
                    accent: true,
                    source: {
                        url: Routing.generate("crm_bon_commande_get_liste")
                    },
                    callback: {
                        onClickAfter: function(node, a, item, event) {
                            $('.entity-bc').val(item.id);
                        }
                    },
                    debug: true

            });

            if($('.entity-compte').val() != "" && $('.entity-compte').val() != null){
                changeAddress();
                $('.typeahead-contact').typeahead({
                        order: "desc",
                        accent: true,
                        source: {
                            url: Routing.generate("crm_contact_get_liste", {'compte_id' : $('.entity-compte').val() })
                        },
                        callback: {
                            onClickAfter: function(node, a, item, event) {
                                $('.entity-contact').val(item.id);
                            }
                        },
                        debug: true

                });
            } else {
                $('.typeahead-contact').typeahead({
                    order: "desc",
                    accent: true,
                    source: {
                        url: Routing.generate("crm_contact_get_liste")
                    },
                    callback: {
                        onClickAfter: function(node, a, item, event) {
                            $('.entity-contact').val(item.id);
                        }
                    },
                    debug: true

                });

            }
			
			$('.typeahead-compte').blur(function() {
				$('div.typeahead-result', '#typeahead-container-contact').remove();
				$(".typeahead-contact").typeahead("destroy");
				$('.typeahead-contact').typeahead({
						order: "desc",
                        accent: true,
						source: {
                            url: Routing.generate("crm_contact_get_liste", {'compte_id' : $('.entity-compte').val() })
						},
						callback: {
							onClickAfter: function(node, a, item, event) {
								$('.entity-contact').val(item.id);
							}
						},
						debug: true

				});
			});

			function changeAddress() {
				$.ajax({
					type: "POST",
					url: Routing.generate("crm_compte_get_coordonnees_by_id",{"id":$('.entity-compte').val()}),
					success: function(data) {
						$(".input-adresse").val(data.adresse);
						$(".input-codepostal").val(data.codePostal);
						$(".input-ville").val(data.ville);
						$(".input-region").val(data.region);
						$(".input-pays").val(data.pays);
						$(".input-telephone").val(data.telephone);
						$(".input-fax").val(data.fax);
					}
				});
			}

			$("#changeDateBtn").click(function() {
				$(".dateCreationInput").prop("disabled", false);
			});

        });
    </script>
{% endblock %}
