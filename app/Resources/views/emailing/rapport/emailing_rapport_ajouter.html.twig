{% extends 'emailing/emailing_layout.html.twig' %}

{% block content %}
	<div class="row">
		<div class="col-md-12">
			<h1>Liste de contact</h1>	
		</div>
	</div>
	
	<div class="row">
		<div class="col-md-12">
			{{ form_start(form, { 'attr': {'class': 'form-inline form-filter'}}) }}
			
			<div class="row">
				<div class="col-md-12">
					{{ form_label(form.nom) }}<br />
					{{ form_widget(form.nom) }}
				</div>
				<div class="col-md-12">
					{{ form_label(form.description) }}<br />
					{{ form_widget(form.description) }}
				</div>
			
			</div>
		
		    <h3>Filtres</h3>
			<ul class="filters" data-prototype="{{ form_widget(form.filters.vars.prototype)|e }}"></ul>
			    {{ form_rest(form) }}
			<input type="submit" value="Créer la liste" class="btn btn-success" />
			{{ form_end(form) }}
		 </div>
	</div>

{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script type="text/javascript">

		// ajoute un lien « add a filter »
		var $addFilterLink = $('<a href="#" class="add_filter_link btn btn-xs btn-success"><span class="glyphicon glyphicon-plus"></span></a>');
		var $newLinkLi = $('<li></li>').append($addFilterLink);
	
		$(document).ready( function () {    
			// Récupère le div qui contient la collection de tags
			var collectionHolder = $('ul.filters');
			// ajoute l'ancre « ajouter un tag » et li à la balise ul
			collectionHolder.append($newLinkLi);

			addFilterForm(collectionHolder, $newLinkLi);
			$('.select_andor').addClass('visibility-hidden');
			
			$addFilterLink.on('click', function(e) {
				// empêche le lien de créer un « # » dans l'URL
				e.preventDefault();
			    // ajoute un nouveau formulaire tag (voir le prochain bloc de code)
			    addFilterForm(collectionHolder, $newLinkLi);

			});

		    function addFilterForm(collectionHolder, $newLinkLi) {
		        // Récupère l'élément ayant l'attribut data-prototype comme expliqué plus tôt
		        var prototype = collectionHolder.attr('data-prototype');
	
		        // Remplace '__name__' dans le HTML du prototype par un nombre basé sur
		        // la longueur de la collection courante
		        var newForm = prototype.replace(/__name__/g, collectionHolder.children().length);
	
		        // Affiche le formulaire dans la page dans un li, avant le lien "ajouter un tag"
		        var $newFormLi = $('<li></li>').append(newForm);
		        $newLinkLi.before($newFormLi);
	
		        addFilterFormDeleteLink($newFormLi);
	
		        $('.select_action').change(function() {
					if($(this).val() == 'EMPTY' || $(this).val() == 'NOT_EMPTY'){
						$(this).parent().next().find('.input_valeur').prop('disabled', true);
					} else {
						$(this).parent().next().find('.input_valeur').prop('disabled', false);
					}
				});
		    }
	
		    function addFilterFormDeleteLink($filterFormLi) {
		        var $removeFormA = $('<a href="#" class="btn btn-xs btn-danger"><span class="glyphicon glyphicon-minus"></span></a>');
		        $filterFormLi.append($removeFormA);
	
		        $removeFormA.on('click', function(e) {
		            // empêche le lien de créer un « # » dans l'URL
		            e.preventDefault();
	
		            // supprime l'élément li pour le formulaire de tag
		            $filterFormLi.remove();
		        });
		    }

			   
			    
		});
	</script>

{% if 1 == 0 %}
	<script>
	tinyMCE.init({
		include_jquery:false,
		tinymce_jquery:false,
		language:"fr",
		theme:{simple:{mode:"textareas",theme:"advanced",theme_advanced_buttons1:"mylistbox,mysplitbutton,bold,italic,underline,separator,strikethrough,justifyleft,justifycenter,justifyright,justifyfull,bullist,numlist,undo,redo,link,unlink",theme_advanced_toolbar_location:"top",theme_advanced_toolbar_align:"left",theme_advanced_statusbar_location:"bottom",paste_auto_cleanup_on_paste:true,plugins:"fullscreen",content_css:"\/web\/css\/tinymce_content.css",theme_advanced_buttons2:"",theme_advanced_buttons3:"",language:"fr"}},
		tinymce_buttons:[],
		external_plugins:[],
		jquery_script_url:"\/web\/bundles\/stfalcontinymce\/vendor\/tiny_mce\/tiny_mce.jquery.js",
		//mode: "textareas",
		//theme: "simple",
		//content_css : "{{ asset('css/tinymce_content.css') }}",
		// update validation status on change
		onchange_callback: function(editor) {
			tinyMCE.triggerSave();
			$("#" + editor.id).valid();
		},
		setup : function(ed) {
	          ed.onChange.add(function(ed, l) {
	                  $('.tinymce').val(l.content);
	          });
		}
	});
	$(function() {
		var validator = $('form[name="{{ form.vars.id }}"]').submit(function() {
			// update underlying textarea before submit validation
			tinyMCE.triggerSave();
		}).validate({
			ignore: "",
			rules: {
				title: "required",
				content: "required"
			},
			errorPlacement: function(error, element) {
				// Append error within linked label
				$( element )
					.closest( "form" )
						.find( "label[for='" + element.attr( "id" ) + "']" )
							.append( error );
			},
			errorElement: "span",
			/*errorPlacement: function(label, element) {
				// position error label after generated textarea
				if (element.is("textarea")) {
					label.insertAfter(element.next());
				} else {
					label.insertAfter(element)
				}
			}*/
		});
		validator.focusInvalid = function() {
			// put focus on tinymce on submit validation
			if (this.settings.focusInvalid) {
				try {
					var toFocus = $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []);
					if (toFocus.is("textarea")) {
						tinyMCE.get(toFocus.attr("id")).focus();
					} else {
						toFocus.filter(":visible").focus();
					}
				} catch (e) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		}
	})
	</script>

{% endif %}










{% endblock %}
