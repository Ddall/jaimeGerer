<div class="modal-header">
	<a class="close" data-dismiss="modal">×</a>
	<h3>Scinder un mouvement bancaire</h3>
</div>

<div class="modal-body">

	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Libellé</th>
				<th>Montant</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>{{ mouvement.date|date('d/m/Y') }}</td>
				<td>{{ mouvement.libelle }}</td>
				<td><span class="mouvement-montant">{{ mouvement.montant }}</span> €</td>
			</tr>
		</tbody>
	</table>

	{{ form_start(form, {'action' : path('compta_mouvement_bancaire_scinder', {'id' : mouvement.id } )} ) }}
	{{ form_errors(form) }}

	<ul class="produits" id="collectionContainer" data-prototype="
	 {% filter escape %}
	 	{{ include('compta/mouvement_bancaire/compta_mouvement_bancaire_form.html.twig', { 'form':  form.mouvements.vars.prototype }) }}
     {% endfilter %}">
     {% for mouvementField in form.mouvements %}
        <li>
	    	{{ include('compta/mouvement_bancaire/compta_mouvement_bancaire_form.html.twig', { 'form': mouvementField }) }}
        </li>
    {% endfor %}
    </ul>

    <div class="center">
    	<p class="error-montant"><i>Le montant de vos nouveaux mouvements n'est pas égal au montant initial.</i></p>
   		<input type="submit" value="Valider" class="btn btn-success" disabled />
    </div>

    {{ form_rest(form) }}
	{{ form_end(form) }}
</div>


<script type="text/javascript">

	// ajoute un lien « add a produit »
	var $addProduitLink = $('<a href="#" class="add_produit_link btn btn-xs btn-success"><span class="glyphicon glyphicon-plus"</a>');
	var $newProduitLi = $('<li></li>').append($addProduitLink);

	$(document).ready( function () {

		// Récupère le div qui contient la collection de tags
		var collectionHolder = $('ul.produits');
		// ajoute l'ancre « ajouter un tag » et li à la balise ul
		collectionHolder.append($newProduitLi);
		// Récupèrer le nombre de produits pour l'incrémenter et éviter le bug du jeu de suppression
		indexNewCollection = collectionHolder.children().length;

		addProduitForm(collectionHolder, $newProduitLi, false);
		addProduitForm(collectionHolder, $newProduitLi, false);

		$addProduitLink.on('click', function(e) {
			// empêche le lien de créer un « # » dans l'URL
			e.preventDefault();
		    // ajoute un nouveau formulaire tag (voir le prochain bloc de code)
		    addProduitForm(collectionHolder, $newProduitLi, true);

		});

		 $('.montant').change(function(){
				montantChanged($(this));
		});

	    function addProduitForm(collectionHolder, $newLinkLi, ExecTinymceCommand) {
	        // Récupère l'élément ayant l'attribut data-prototype comme expliqué plus tôt
	        var prototype = collectionHolder.attr('data-prototype');

	        // Remplace '__name__' dans le HTML du prototype par un nombre basé sur
	        // Toujours incrémenter pour éviter la duplication des noms/ids
	        indexNewCollection++;
	        // la longueur de la collection courante
	        var newForm = prototype.replace(/__name__/g, indexNewCollection);

	        // Affiche le formulaire dans la page dans un li, avant le lien "ajouter un tag"
	        var $newFormLi = $('<li></li>').append(newForm);
	        $newLinkLi.before($newFormLi);
	        // Pour ne pas exécuter la commande dans la 1ère collection de l'ajout
			if( ExecTinymceCommand ) tinyMCE.execCommand("mceAddControl",false, $($newFormLi).find('textarea').attr("id"));

			$(".dateInput").datepicker({
				dateFormat: 'dd/mm/yy',
				firstDay:1
			});

			// "unbind" puis "on..." pour éviter la double exécution de l'événement
			$('.remove-button').unbind('click');
	        $('.remove-button').on('click', function(e) {
	            // empêche le lien de créer un « # » dans l'URL
	            e.preventDefault();
	            // supprime l'élément li pour le formulaire de tag
	            $(this).parents('li').remove();
	        });

	     // "unbind" puis "on..." pour éviter la double exécution de l'événement
			$('.montant').unbind('change');
	        $('.montant').on('change', function(e) {
	        	montantChanged($(this));
	        });
	    }

	    function montantChanged(element){

	    	var montant = $(element).val();
	    	montant = montant.replace(",", ".");
	    	$(element).val(montant);

		    var mouvement_montant =  $('.mouvement-montant').text();
			//supprimer signe - sur un montant négatif
			if(+mouvement_montant < 0){
				mouvement_montant = mouvement_montant.slice(1);
			}

			var total = 0;
			$.each($('.montant'), function( index, value ) {
				var montant=$(this).val();
				total+= +montant;
	    	});

			total = total.toFixed(2);//toFixed used to correct the result given when adding two floating point variables - see http://stackoverflow.com/questions/588004/is-floating-point-math-broken

			if(total == +mouvement_montant){
				$(':submit').prop('disabled', false);
				$('.error-montant').addClass('hidden');
			}else{
				$(':submit').prop('disabled', true);
				$('.error-montant').removeClass('hidden');
			}
		}




	});
</script>
