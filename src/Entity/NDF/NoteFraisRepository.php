<?php

namespace App\Entity\NDF;

use Doctrine\ORM\EntityRepository;

/**
 * NoteFraisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NoteFraisRepository extends EntityRepository
{
	public function findForList($company, $length, $start, $orderBy, $dir, $search, $etat = '', $dateRange = '', $dateCreationRange = '' ){

		$qb = $this->createQueryBuilder('n')
		->select('n.id',  "CONCAT( CONCAT(u.firstname, ' '),  u.lastname) as nom" , 'n.month', 'n.year', 'n.etat', 'n.dateCreation')
		->leftJoin('App\Entity\Compta\CompteComptable', 'c', 'WITH', 'c.id = n.compteComptable')
		->leftJoin('App\Entity\User', 'u', 'WITH', 'u.id = n.user')
		->where('c.company = :company')
		->setParameter('company', $company);


		if($etat != "ALL"){
			$qb->andWhere('n.etat = :etat')
				->setParameter('etat', $etat);
		}

		if( is_array($dateRange) ){
			$qb
				->andWhere('n.year >= :anneeDebut')
				->andWhere('n.month >= :moisDebut')
				->setParameter('anneeDebut',\DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start'])->format('Y'))
				->setParameter('moisDebut',\DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start'])->format('n'))
				->andWhere('n.year <= :anneeFin')
				->andWhere('n.month <= :moisFin')
				->setParameter('anneeFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end'])->format('Y'))
				->setParameter('moisFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end'])->format('n'));
		}

		if( is_array($dateCreationRange) ){
			$qb->andWhere('n.dateCreation >= :dateDebut')
				->andWhere('n.dateCreation <= :dateFin')
				->setParameter('dateDebut', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateCreationRange['start'])->format('Y-m-d'))
				->setParameter('dateFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateCreationRange['end'])->format('Y-m-d'));
		}
		
		if($search){
			$qb->andWhere('u.firstname LIKE :search or u.lastname LIKE :search')
				->setParameter('search', '%'.$search.'%');
		}

		if($orderBy == "nom"){
			$qb->addOrderBy('u.firstname', $dir);
		} else if($orderBy == "date"){
			$qb->addOrderBy('n.year', $dir);
			$qb->addOrderBy('n.month', $dir);
		} else {
			$qb->addOrderBy('n.'.$orderBy, $dir);
		}


		$qb->setMaxResults($length)
		->setFirstResult($start);

		return $qb->getQuery()->getResult();
	}

	public function countForList($company, $search,$rapprochement = '', $dateRange = ''){
		$qb = $this->createQueryBuilder('n')
		->select('COUNT(n)')
		->leftJoin('App\Entity\Compta\CompteComptable', 'c', 'WITH', 'c.id = n.compteComptable')
		->where('c.company = :company')
		->setParameter('company', $company);

		if( is_array($dateRange) ){
			$qb
				->andWhere('n.year >= :anneeDebut')
				->andWhere('n.month >= :moisDebut')
				->setParameter('anneeDebut',\DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start'])->format('Y'))
				->setParameter('moisDebut', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start'])->format('n'))
				->andWhere('n.year <= :anneeFin')
				->andWhere('n.month <= :moisFin')
				->setParameter('anneeFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end'])->format('Y'))
				->setParameter('moisFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start'])->format('n'));
		}
		if( $rapprochement != ''){
			if($rapprochement = 'rapproche'){
				$qb
					->andWhere('n.etat = :rapproche')
					->setParameter('rapproche', $rapprochement);
			}
			else{
				$qb
					->andWhere('n.etat = :rapproche')
					->setParameter('rapproche', $rapprochement);
			}
		}


		return $qb->getQuery()->getSingleScalarResult();
	}

	public function custom_count($company){
		$qb = $this->createQueryBuilder('n')
		->select('COUNT(n)')
		->leftJoin('App\Entity\Compta\CompteComptable', 'c', 'WITH', 'c.id = n.compteComptable')
		->where('c.company = :company')
		->setParameter('company', $company);

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findForCompany($company){
		$qb = $this->createQueryBuilder('n')
		->leftJoin('App\Entity\Compta\CompteComptable', 'c', 'WITH', 'c.id = n.compteComptable')
		->where('c.company = :company')
		->setParameter('company', $company);

		return $qb->getQuery()->getResult();
	}

}
