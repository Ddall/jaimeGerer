<?php

namespace App\Entity\Compta;

use Doctrine\ORM\EntityRepository;

/**
 * JournalAchatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JournalAchatRepository extends EntityRepository
{
	public function findJournalEntier($company, $year){

		$result = $this->createQueryBuilder('j')
			->leftJoin('App\Entity\Compta\Depense', 'd', 'WITH', 'j.depense = d.id')
			->leftJoin('App\Entity\CRM\Compte', 'c1', 'WITH', 'd.compte = c1.id')
			->leftJoin('App\Entity\Compta\Avoir', 'a', 'WITH', 'j.avoir = a.id')
			->leftJoin('App\Entity\Compta\Depense', 'd2', 'WITH', 'a.depense = d2.id')
			->leftJoin('App\Entity\NDF\NoteFrais', 'n', 'WITH', 'd.noteFrais = n.id')
			->leftJoin('App\Entity\Compta\CompteComptable', 'cc', 'WITH', 'cc.id = n.compteComptable')
			->leftJoin('App\Entity\CRM\Compte', 'c2', 'WITH', 'd2.compte = c2.id')
			->where('c1.company = :company or c2.company = :company or cc.company = :company')
			->andWhere('(d.date >= :startDate and d.date <= :endDate) or (a.dateCreation >= :startDate and a.dateCreation <= :endDate)')
			->setParameter('startDate', $year.'-01-01')
			->setParameter('endDate', $year.'-12-31')
			->setParameter('company', $company)
			->orderBy('d.date', 'DESC')
			->orderBy('a.dateCreation', 'DESC')
			->addOrderBy('j.depense', 'DESC')
			->addOrderBy('j.debit', 'ASC')
			->getQuery()
			->getResult();

		return $result;
	}

	public function findByCompteForCompany($compteComptable, $company = null, $startDate = null, $endDate = null){

		$qb = $this->createQueryBuilder('j')
			->leftJoin('App\Entity\Compta\Depense', 'd', 'WITH', 'j.depense = d.id')
			->leftJoin('App\Entity\CRM\Compte', 'c1', 'WITH', 'd.compte = c1.id')
			->leftJoin('App\Entity\Compta\Avoir', 'a', 'WITH', 'j.avoir = a.id')
			->leftJoin('App\Entity\Compta\Depense', 'd2', 'WITH', 'a.depense = d2.id')
			->leftJoin('App\Entity\CRM\Compte', 'c2', 'WITH', 'd2.compte = c2.id');

			if($company){
				$qb
					->where('c1.company = :company or c2.company = :company')
					->setParameter('company', $company);
			}

			$qb->andWhere('j.compteComptable = :compteComptable')
			->setParameter('compteComptable', $compteComptable);

			if($startDate && $endDate){
				$qb->andWhere('(d.date >= :startDate and d.date <= :endDate) or (a.dateCreation >= :startDate and a.dateCreation <= :endDate)')
					->setParameter('startDate', $startDate)
					->setParameter('endDate', $endDate);
			}

			$qb->orderBy('d.dateCreation', 'ASC')
			->addOrderBy('j.debit', 'DESC');

			$result = $qb->getQuery()
			->getResult();

		return $result;
	}

	public function findCompteAttenteACorriger($compteComptable, $company, $year){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('od')
			->from('App\Entity\Compta\OperationDiverse', 'od')
			->where('j.depense = od.depense')
			->orWhere('j.avoir = od.avoir');

		if($year){
			$subQueryBuilder->andWhere('od.date >= :startDate and od.date <= :endDate');
		}

		$query = $this->createQueryBuilder('j')
			->leftJoin('App\Entity\Compta\Depense', 'd', 'WITH', 'j.depense = d.id')
			->leftJoin('App\Entity\CRM\Compte', 'c1', 'WITH', 'd.compte = c1.id')
			->leftJoin('App\Entity\Compta\Avoir', 'a', 'WITH', 'j.avoir = a.id')
			->leftJoin('App\Entity\Compta\Depense', 'd2', 'WITH', 'a.depense = d2.id')
			->leftJoin('App\Entity\CRM\Compte', 'c2', 'WITH', 'd2.compte = c2.id')
			->where('c1.company = :company or c2.company = :company')
			->andWhere('j.compteComptable = :compteComptable')
			->setParameter('company', $company)
			->setParameter('compteComptable', $compteComptable);

		if($year){
			$query
			->andWhere('(d.dateCreation >= :startDate and d.dateCreation <= :endDate) or (a.dateCreation >= :startDate and a.dateCreation <= :endDate)')
			->setParameter('startDate', $year.'-01-01')
			->setParameter('endDate', $year.'-12-31');
		}

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));

		$result = $query->orderBy('d.num', 'ASC')
			->addOrderBy('j.debit', 'DESC')
			->getQuery()
			->getResult();

		return $result;
	}

	public function findInverse($ligne){
		$result = $this->createQueryBuilder('j')
		->where('j.depense = :depense or j.avoir = :avoir')
		->andWhere('j.compteComptable != :compteComptable')
		->setParameter('depense', $ligne->getDepense())
		->setParameter('avoir', $ligne->getAvoir())
		->setParameter('compteComptable', $ligne->getCompteComptable())
		->getQuery()
		->getResult();

		return $result;
	}

	public function findMaxLettrage($compteComptable){
		$result = $this->createQueryBuilder('j')
			->select('MAX(j.lettrage as max_lettrage')
			->where('j.compteComptable = :compteComptable')
			->setParameter('compteComptable', $compteComptable)
			->getQuery()
			->getSingleResult();

		return $result;
	}

	public function findAllLettrage($compteComptable, $annee){
		$result = $this->createQueryBuilder('j')
			->select('DISTINCT(j.lettrage)')
			->leftJoin('App\Entity\Compta\Depense', 'd', 'WITH', 'j.depense = d.id')
			->leftJoin('App\Entity\CRM\Compte', 'c1', 'WITH', 'd.compte = c1.id')
			->leftJoin('App\Entity\Compta\Avoir', 'a', 'WITH', 'j.avoir = a.id')
			->leftJoin('App\Entity\Compta\Depense', 'd2', 'WITH', 'a.depense = d2.id')
			->leftJoin('App\Entity\NDF\NoteFrais', 'n', 'WITH', 'd.noteFrais = n.id')
			->leftJoin('App\Entity\Compta\CompteComptable', 'cc', 'WITH', 'cc.id = n.compteComptable')
			->leftJoin('App\Entity\CRM\Compte', 'c2', 'WITH', 'd2.compte = c2.id')
			->where('j.compteComptable = :compteComptable')
			->andWhere('(d.dateCreation >= :startDate and d.dateCreation <= :endDate) or (a.dateCreation >= :startDate and a.dateCreation <= :endDate)')
			->setParameter('startDate', $annee.'-01-01')
			->setParameter('endDate', $annee.'-12-31')
			->setParameter('compteComptable', $compteComptable)
			->getQuery()
			->getArrayResult();

		return $result;
	}

	public function findNonLettreesByCompanyAndYear($company, $year){

		$result = $this->createQueryBuilder('j')
			->leftJoin('App\Entity\Compta\Depense', 'd', 'WITH', 'j.depense = d.id')
			->leftJoin('App\Entity\Compta\CompteComptable', 'jcc', 'WITH', 'jcc.id = j.compteComptable')
			->leftJoin('App\Entity\CRM\Compte', 'c1', 'WITH', 'd.compte = c1.id')
			->leftJoin('App\Entity\Compta\Avoir', 'a', 'WITH', 'j.avoir = a.id')
			->leftJoin('App\Entity\Compta\Depense', 'd2', 'WITH', 'a.depense = d2.id')
			->leftJoin('App\Entity\NDF\NoteFrais', 'n', 'WITH', 'd.noteFrais = n.id')
			->leftJoin('App\Entity\Compta\CompteComptable', 'cc', 'WITH', 'cc.id = n.compteComptable')
			->leftJoin('App\Entity\CRM\Compte', 'c2', 'WITH', 'd2.compte = c2.id')
			->where('c1.company = :company or c2.company = :company or cc.company = :company')
			->andWhere('(d.date >= :startDate and d.date <= :endDate) or (a.dateCreation >= :startDate and a.dateCreation <= :endDate)')
			->andWhere('j.lettrage IS NULL')
			->andWhere('jcc.num LIKE :fournisseur or jcc.num LIKE :client')
			->setParameter('startDate', $year.'-01-01')
			->setParameter('endDate', $year.'-12-31')
			->setParameter('company', $company)
			->setParameter('fournisseur', '401%')
			->setParameter('client', '411%')
			->orderBy('d.date', 'DESC')
			->orderBy('a.dateCreation', 'DESC')
			->addOrderBy('j.depense', 'DESC')
			->addOrderBy('j.debit', 'ASC')
			->getQuery()
			->getResult();

		return $result;
	}


}
