<?php

namespace AppBundle\Entity\Emailing;

use Doctrine\ORM\EntityRepository;

/**
 * CampagneRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampagneRepository extends EntityRepository
{
	public function count($userCreation){
		$result = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		->where('c.userCreation = :userCreation')
		->setParameter('userCreation', $userCreation)
		->getQuery()
		->getSingleScalarResult();
		
		return $result;
	}
	
	public function findForList($userCreation, $length, $start, $orderBy, $dir, $search){
		$qb = $this->createQueryBuilder('c')
			->select('c.id', 'c.nomCampagne', 'c.dateCreation', 'c.objetEmail', 'c.envoyee')
			//~ ->innerJoin('AppBundle\Entity\CRM\Rapport', 'ra', 'WITH', 'ra.id = c.listesContact')
			->where('c.userCreation = :userCreation')
			->setParameter('userCreation', $userCreation);
		
		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nomCampagne LIKE :search')
			//~ ->orWhere('c.region LIKE :search')
			//~ ->orWhere('c.ville LIKE :search')
			//~ ->orWhere('c.pays LIKE :search')
			//~ ->orWhere('c.telephone LIKE :search')
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.nom', 
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.prenom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.prenom', 
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.nom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			->setParameter('search', '%'.$search.'%');
		}
		
		$qb->setMaxResults($length)
	        ->setFirstResult($start)
	        ->addOrderBy('c.'.$orderBy, $dir);
	
		return $qb->getQuery()->getResult();
	}
	
	public function countForList($userCreation, $search){
		$qb = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		//~ ->leftJoin('AppBundle\Entity\CRM\Contact', 'co', 'WITH', 'co.compte = c.id')
		->where('c.userCreation = :userCreation')
		->setParameter('userCreation', $userCreation);
		
		if($search != ""){
				
			$qb->andWhere('c.nomCampagne LIKE :search')
			//~ ->orWhere('c.region LIKE :search')
			//~ ->orWhere('c.ville LIKE :search')
			//~ ->orWhere('c.pays LIKE :search')
			//~ ->orWhere('c.telephone LIKE :search')
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.nom', 
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.prenom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.prenom', 
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.nom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			->setParameter('search', '%'.$search.'%');
		}
		
//\Doctrine\Common\Util\Debug::dump($qb->getQuery()->getSql());		
		return $qb->getQuery()->getSingleScalarResult();
	}
		
	public function findForListStats($userCreation, $length, $start, $orderBy, $dir, $search){
		$qb = $this->createQueryBuilder('c')
			->select('c.id', 'c.nomCampagne', 'c.dateCreation', 'c.objetEmail', 'c.envoyee')
			->where('c.userCreation = :userCreation')
			->andWhere('c.envoyee = :envoyee')
			->setParameter('envoyee', true)
			->setParameter('userCreation', $userCreation);
		
		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nomCampagne LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}
		
		$qb->setMaxResults($length)
	        ->setFirstResult($start)
	        ->addOrderBy('c.'.$orderBy, $dir);
	
		return $qb->getQuery()->getResult();
	}
	
	public function countForListStats($userCreation, $search){
		$qb = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		//~ ->leftJoin('AppBundle\Entity\CRM\Contact', 'co', 'WITH', 'co.compte = c.id')
		->where('c.userCreation = :userCreation')
		->andWhere('c.envoyee = :envoyee')
		->setParameter('envoyee', true)
		->setParameter('userCreation', $userCreation);
		
		if($search != ""){
				
			$qb->andWhere('c.nomCampagne LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}
		
//\Doctrine\Common\Util\Debug::dump($qb->getQuery()->getSql());		
		return $qb->getQuery()->getSingleScalarResult();
	}
		
	public function findAllExcept($id = 0){

		$qb = $this->createQueryBuilder('u');
		$qb->where('u.id != :identifier')
		   ->setParameter('identifier', $id);

		return $qb->getQuery()
			  ->getResult();
	}

	public function createQueryAndGetResult($arr_filters, $userCreation){
		
		$query = $this->createQueryBuilder('c');
		
		$index=0;
		
		foreach($arr_filters as $filter){
			
			$champ = $filter->getChamp();
			$action = $filter->getAction();
			$andor = $filter->getAndor();
			
			if($action == 'EMPTY'){
				if($index == 0){
					$query->where('c.'.$champ.' IS NULL' );
				} else {
					if($andor == 'AND'){
						$query->andWhere('c.'.$champ.' IS NULL' );
					} else{
						$query->orWhere('c.'.$champ.' IS NULL' );
					}
				}
			} else if($action == 'NOT_EMPTY'){
				if($index == 0){
					$query->where('c.'.$champ.' IS NOT NULL' );
				} else {
					if($andor == 'AND'){
						$query->andWhere('c.'.$champ.' IS NOT NULL' );
					} else{
						$query->orWhere('c.'.$champ.' IS NOT NULL' );
					}
				}
			} else {

				$operateur = 'LIKE';
				
				if($action == 'NOT_EQUALS' || $action == 'NOT_CONTAINS'){
					$operateur = 'NOT LIKE';
				}
				
				$arr_valeurs = explode(',', $filter->getValeur());
				$where = '';
				
				for($i=0; $i<count($arr_valeurs); $i++){
			
					$param = ':valeur'.$index.$i;
					
					$val = '';
					if($action == 'EQUALS' || $action == 'NOT_EQUALS'){
						$val = $arr_valeurs[$i];
					} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
						$val = '%'.$arr_valeurs[$i].'%';
					} elseif($action == 'BEGINS_WITH'){
						$val = $arr_valeurs[$i].'%';
					} elseif($action == 'ENDS_WITH'){
						$val = '%'.$arr_valeurs[$i];
					}
					
					if($i != 0){
						$where.=' OR ';
					}
					$where.= 'c.'.$champ.' '.$operateur.' '.$param;
					$query->setParameter($param, $val);

				}
				
				if($index == 0){
					$query->where($where);
				} else {
					if($andor == 'AND'){
						$query->andWhere($where);
					} else{
						$query->orWhere($where);
					}
				}
				
			}
			$index++;
		}
		
		$query->andWhere('c.userCreation = :userCreation')
		->setParameter('userCreation', $userCreation);
		
		$result = $query->getQuery()->getResult();

		return $result;
	}

}
