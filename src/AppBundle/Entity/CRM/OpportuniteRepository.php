<?php

namespace AppBundle\Entity\CRM;

use AppBundle\AppBundle;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Settings;
/**
 * OpportuniteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OpportuniteRepository extends EntityRepository
{
	public function getBannedSettings($SettingsRepository){
		$bannedSettings		= $SettingsRepository->findBy(array('valeur' => array('ClosedWon - 100%', 'PLCompetition - 0%', 'PL - 0%')));
		return $bannedSettings;
	}

	public function count($company, $etat="ONGOING"){

			$result = $this->createQueryBuilder('o')
			->select('COUNT(o)')
			->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = o.compte')
			->where('co.company = :company')
			->andWhere('o.etat = :etat')
			->setParameter('etat', $etat)
			->setParameter('company', $company)
			->getQuery()
			->getSingleScalarResult();

		return $result;
	}

	public function findForList($company, $length, $start, $orderBy, $dir, $search, $dateRange = '', $etat=null, $gestionnaire='all'){
		$qb = $this->createQueryBuilder('o')
		->select('o.id', 'o.nom', 'o.montant', 'o.date', 'o.appelOffre', 'c.nom as compte', 'c.id as compte_id', 'o.etat')
		->leftJoin('o.compte', 'c')
		->leftJoin('o.devis', 'd')
		->where('c.company = :company')
		->setParameter('company', $company);

		if($search != ""){
			$qb->andWhere('o.nom LIKE :search OR c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		if($etat && $etat!="all"){
			$qb->andWhere('o.etat LIKE :etat')
			->setParameter('etat', $etat);
		}

		if( is_array($dateRange) ){
            $dateStart = $dateRange['start'] instanceof \DateTime ? $dateRange['start'] :
                \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']) ;
            $dateEnd = $dateRange['end'] instanceof \DateTime ? $dateRange['end'] :
                \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']) ;
			$qb->andWhere('o.date >= :dateDebut')
				->setParameter('dateDebut', $dateStart->format('Y-m-d'))
				->andWhere('o.date <= :dateFin')
				->setParameter('dateFin', $dateEnd->format('Y-m-d'));
		}

		if($gestionnaire != 'all'){
			$qb->andWhere('o.userGestion = :gestionnaire')
			->setParameter('gestionnaire', $gestionnaire);
		}

		$qb->setMaxResults($length)
		->setFirstResult($start);

		if($orderBy != 'numero_devis' && $orderBy != 'bon_commande'){
			$qb->addOrderBy('o.'.$orderBy, $dir);
		} else {
			$qb->addOrderBy('d.num', $dir);
		}
		

		return $qb->getQuery()->getResult();
	}

    /**
     * return all closed opportunity
     *
     * @return mixed
     */
	public function getClosedOpportunity($company, $year=null){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.etat != :etat')
		->setParameter('etat', 'ONGOING')
		->setParameter('company', $company);

        return $qb->getQuery()->execute();
    }



	public function countForList($company, $search, $dateRange = '', $etat=null){
		$qb = $this->createQueryBuilder('o')
		->select('COUNT(o)')
		->leftJoin('o.compte', 'c')
		->where('c.company = :company')
		->setParameter('company', $company);

		if($search != ""){
			$qb->andWhere('o.nom LIKE :search OR c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		if( is_array($dateRange) ){
            $dateStart = $dateRange['start'] instanceof \DateTime ? $dateRange['start'] :
                \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']) ;
            $dateEnd = $dateRange['end'] instanceof \DateTime ? $dateRange['end'] :
                \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']) ;
			$qb->andWhere('o.date >= :dateDebut')
				->setParameter('dateDebut', $dateStart->format('Y-m-d'))
				->andWhere('o.date <= :dateFin')
				->setParameter('dateFin', $dateEnd->format('Y-m-d'));
		}


		if($etat && $etat!="all"){
			$qb->andWhere('o.etat LIKE :etat')
			->setParameter('etat', $etat);
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getFunnelChartData($company){

		$thisYear = date('Y');
		$lastYear = $thisYear-1;

		$result = $this->createQueryBuilder('o')
			->select('s.valeur as probabilite, SUM(o.montant) as total')
			->innerJoin('o.compte', 'c')
			->innerJoin('o.probabilite', 's')
			->where('c.company = :company')
			->andWhere('o.etat = :ongoing')
			->andWhere('o.date LIKE :thisYear or o.date LIKE :lastYear')
			->setParameter('company', $company)
			->setParameter('ongoing', 'ONGOING')
			->setParameter('thisYear', $thisYear.'%')
			->setParameter('lastYear',  $lastYear.'%')
			->groupBy('o.probabilite')
			->getQuery()->getResult();

		return $result;
	}

	public function nettoyer($company, $echeance){
		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.etat != :etat');

		$qb->andWhere($qb->expr()->lt('o.echeance', ':echeance'))
		->setParameter('company', $company)
		->setParameter(':echeance', $echeance)
		->setParameter(':etat', "WON");

		//\Doctrine\Common\Util\Debug::dump($qb);

		$sql = $qb->getQuery();

		$result = $sql->getResult();

		return $result;
	}

	public function createQueryAndGetResult($arr_filters, $company){

		$qb  = $this->_em->createQueryBuilder();

		$query = $this->createQueryBuilder('o')
		->leftjoin('o.settings', 's');

		$index=0;
		$leftJoinProbabilite = false; //$settingsRepository = $em->getRepository('AppBundle:Settings');
		$SettingsRepository = $this->_em->getRepository('AppBundle:Settings');
		$pb = $SettingsRepository->findBy(array('parametre' => array('OPPORTUNITE_STATUT')));
		//~ var_dump($pb); exit;
		foreach($arr_filters as $filter){

			$champ = $filter->getChamp();
			$action = $filter->getAction();
			$andor = $filter->getAndor();

			$operateur = 'LIKE';

			if($action == 'NOT_EQUALS' || $action == 'NOT_CONTAINS'){
				$operateur = 'NOT LIKE';
			} else if($action == 'MORE_THAN'){
				$operateur = '>';
			} else if($action == 'LESS_THAN'){
				$operateur = '<';
			}

			$arr_valeurs = explode(',', $filter->getValeur());

			$where = '';

			if($champ == 'probabilite'){

				if( !$leftJoinProbabilite )
				{
					$query->leftjoin('o.probabilite', 's1');
					$leftJoinProbabilite = true;
				}
				//~ $where = 's.parametre = :param'.$index;
				$where = 's1.parametre = :param'.$index;
				$query->setParameter('param'.$index, 'OPPORTUNITE_STATUT');

				$where.=' AND ';

				for($i=0; $i<count($arr_valeurs); $i++){

					$param = ':valeur'.$index.$i;

					$val = '';

					if($action == 'EQUALS' || $action == 'NOT_EQUALS'){
						$val = $arr_valeurs[$i];
					} elseif($action == 'MORE_THAN'){
						$operateur = 'in';
						$val = array();
						foreach( $pb as $k=>$v )
						{
							//~ var_dump($v->getValeur());
							$newPB = preg_replace('/[^0-9]/', '', $v->getValeur());
							if( $arr_valeurs[$i] > $newPB && $newPB > 0 )
							{
								$val[] = $v->getValeur();
							}
						}
						//~ $val = '"'.implode('","', $val).'"';
						//~ var_dump($arr_valeurs[$i]);
						//~ var_dump($val); exit;
						//~ $val = $arr_valeurs[$i];
					} elseif($action == 'LESS_THAN'){
						$operateur = 'in';
						$val = array();
						foreach( $pb as $k=>$v )
						{
							//~ var_dump($v->getValeur());
							$newPB = preg_replace('/[^0-9]/', '', $v->getValeur());
							if( $arr_valeurs[$i] <= $newPB && $newPB > 0 )
							{
								$val[] = $v->getValeur();
							}
						}
						//~ $val = '"'.implode('","', $val).'"';
						//~ var_dump($arr_valeurs[$i]);
						//~ var_dump($val); exit;
						//~ $val = $arr_valeurs[$i];
					} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
						$val = '%'.$arr_valeurs[$i].'%';
					} elseif($action == 'BEGINS_WITH'){
						$val = $arr_valeurs[$i].'%';
					} elseif($action == 'ENDS_WITH'){
						$val = '%'.$arr_valeurs[$i];
					}

					if($i != 0){
						$where.=' OR ';
					}
					//~ $where.= 's.valeur '.$operateur.' '.$param;
					$where.= $operateur == 'in' ? 's1.valeur '.$operateur.' ('.$param.') ' : 's1.valeur '.$operateur.' '.$param;
					$query->setParameter($param, $val);
				}

				if($index == 0){
					$query->andWhere($where);
				} else {
					if($andor == 'AND'){
						$query->andWhere($where);
					} else{
						$query->orWhere($where);
					}
				}

			} else {
				if($action == 'EMPTY'){

					if($index == 0){
						$query->where('o.'.$champ.' IS NULL');
					} else {
						if($andor == 'AND'){
							$query->andWhere('o.'.$champ.' IS NULL');
						} else{
							$query->orWhere('o.'.$champ.' IS NULL');
						}
					}

				} else if($action == 'NOT_EMPTY'){
				if($index == 0){
						$query->where('o.'.$champ.' IS NOT NULL');
					} else {
						if($andor == 'AND'){
							$query->andWhere('o.'.$champ.' IS NOT NULL');
						} else{
							$query->orWhere('o.'.$champ.' IS NOT NULL');
						}
					}

				} else {

					for($i=0; $i<count($arr_valeurs); $i++){

						$param = ':valeur'.$index.$i;
						$val = '';
						if($action == 'EQUALS' || $action == 'NOT_EQUALS' || $action == 'MORE_THAN' || $action == 'LESS_THAN'){
							$val = $arr_valeurs[$i];
						} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
							$val = '%'.$arr_valeurs[$i].'%';
						} elseif($action == 'BEGINS_WITH'){
							$val = $arr_valeurs[$i].'%';
						} elseif($action == 'ENDS_WITH'){
							$val = '%'.$arr_valeurs[$i];
						}

						if($i != 0){
							$where.=' OR ';
						}

						$where.= 'o.'.$champ.' '.$operateur.' '.$param;
						$query->setParameter($param, $val);
					}

					if($index == 0){
						$query->where($where);
					} else {
						if($andor == 'AND'){
							$query->andWhere($where);
						} else{
							$query->orWhere($where);
						}
					}

				}
			}
			$index++;
		}

		$query->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = o.compte')
		->andWhere('co.company = :company')
		->setParameter('company', $company);


		$result = $query->getQuery()->getResult();

		return $result;
	}

	public function findForCompanyByYear($company, $year){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->setParameter('company', $company)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31');

		return $qb->getQuery()->getResult();
	}

	public function findForCompanyByYearAndAnalytiqueHavingTempsCommercial($company, $year, $analytique){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->andWhere('o.analytique = :analytique')
		->andWhere('o.tempsCommercial > 0')
		->setParameter('company', $company)
		->setParameter('analytique', $analytique)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31');

		return $qb->getQuery()->getResult();
	}

	public function findForCompanyByYearAndAOHavingTempsCommercial($company, $year, $ao){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->andWhere('o.appelOffre = :ao')
		->andWhere('o.tempsCommercial > 0')
		->setParameter('company', $company)
		->setParameter('ao', $ao)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31');

		return $qb->getQuery()->getResult();
	}

	public function findForCompanyByYearPrivePublicHavingTempsCommercial($company, $year, $priveOrPublic){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->andWhere('o.priveOrPublic = :priveOrPublic')
		->andWhere('o.tempsCommercial > 0')
		->setParameter('company', $company)
		->setParameter('priveOrPublic', $priveOrPublic)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31');

		return $qb->getQuery()->getResult();
	}

	public function findMinForCompanyByYearAndMontantTempsCommercial($company, $year, $min, $max){
		$qb = $this->createQueryBuilder('o')
		->select('MIN(o.tempsCommercial)')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->andWhere('o.montant >= :min')
		->andWhere('o.montant <= :max')
		->andWhere('o.tempsCommercial > 0')
		->andWhere('o.tempsCommercial IS NOT NULL')
		->setParameter('company', $company)
		->setParameter('min', $min)
		->setParameter('max', $max)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31');

		return $qb->getQuery()->getOneOrNullResult();
	}

	public function findMaxForCompanyByYearAndMontantTempsCommercial($company, $year, $min, $max){
		$qb = $this->createQueryBuilder('o')
		->select('MAX(o.tempsCommercial)')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->andWhere('o.montant >= :min')
		->andWhere('o.montant <= :max')
		->andWhere('o.tempsCommercial > 0')
		->andWhere('o.tempsCommercial IS NOT NULL')
		->setParameter('company', $company)
		->setParameter('min', $min)
		->setParameter('max', $max)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31');

		return $qb->getQuery()->getOneOrNullResult();
	}


	public function findWonForCompanyByYear($company, $year){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->andWhere('o.etat <= :won')
		->setParameter('company', $company)
		->setParameter('start', $year.'-01-01')
		->setParameter('end',  $year.'-12-31')
		->setParameter('won', 'WON');

		return $qb->getQuery()->getResult();
	}

	public function findForCompany($company){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->setParameter('company', $company);

		return $qb->getQuery()->getResult();
	}

	public function findWonBetweenDates($company, $startDate, $endDate){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.dateWon >= :start')
		->andWhere('o.dateWon <= :end')
		->andWhere('o.etat = :won')
		->setParameter('company', $company)
		->setParameter('start', $startDate)
		->setParameter('end', $endDate)
		->setParameter('won', 'WON');

		return $qb->getQuery()->getResult();
	}

	public function findBetweenDates($company, $startDate, $endDate){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.date >= :start')
		->andWhere('o.date <= :end')
		->setParameter('company', $company)
		->setParameter('start', $startDate)
		->setParameter('end', $endDate);

		return $qb->getQuery()->getResult();
	}

	public function findWonNotClosed($company){

		$qb = $this->createQueryBuilder('o')
		->innerJoin('o.compte', 'c')
		->where('c.company = :company')
		->andWhere('o.termine = false')
		->andWhere('o.etat = :won')
		->setParameter('company', $company)
		->setParameter('won', 'WON');

		return $qb->getQuery()->getResult();
	}
	
}
