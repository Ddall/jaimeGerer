<?php

namespace AppBundle\Entity\CRM;

use Doctrine\ORM\EntityRepository;

/**
 * DevisRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DocumentPrixRepository extends EntityRepository
{
	public function count($company, $type, $SettingsRepository = null, $DevisParent = null, $compta=null){
		if( is_null($SettingsRepository) )
			if( is_null($DevisParent) )
				$result = $this->createQueryBuilder('d')
				->select('COUNT(d)')
				->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = d.compte')
				->where('co.company = :company')
				->setParameter('company', $company)
				->andWhere('d.type = :type')
				->setParameter('type', $type);
			else
				$result = $this->createQueryBuilder('d')
				->select('COUNT(d)')
				->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = d.compte')
				->where('co.company = :company')
				->setParameter('company', $company)
				->andWhere('d.type = :type')
				->setParameter('type', $type)
				->andWhere('d.devis = :DevisParent')
				->setParameter('DevisParent', $DevisParent);
		else
			if( is_null($DevisParent) )
				$result = $this->createQueryBuilder('d')
				->select('COUNT(d)')
				->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = d.compte')
				->where('co.company = :company')
				->setParameter('company', $company)
				->andWhere('d.type = :type')
				->setParameter('type', $type)
				->andWhere('d.etat = :etatDevis')
				->setParameter('etatDevis', $SettingsRepository);
			else
				$result = $this->createQueryBuilder('d')
				->select('COUNT(d)')
				->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = d.compte')
				->where('co.company = :company')
				->setParameter('company', $company)
				->andWhere('d.type = :type')
				->setParameter('type', $type)
				->andWhere('d.etat = :etatDevis')
				->setParameter('etatDevis', $SettingsRepository)
				->andWhere('d.devis = :DevisParent')
				->setParameter('DevisParent', $DevisParent);


			if($compta != null){
				$result->andWhere('d.compta = :compta')
				->setParameter('compta', $compta);
			}

		return $result->getQuery()
			->getSingleScalarResult();
	}

	public function findForList($company, $type, $length, $start, $orderBy, $dir, $search, $etatDevisSearch = null, $DevisParent = null, $compta=null, $dateRange = ''){
		$qb = $this->createQueryBuilder('d')
		->select('d.id', 'd.objet', 'd.num', 'd.dateCreation', 'd.etat', 'd.numBCInterne', 'c.nom as compte_nom', 'c.id as compte_id')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->setParameter('company', $company);
		if( is_array($dateRange) ){
            $dateStart = $dateRange['start'] instanceof \DateTime ? $dateRange['start'] :
                    \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']) ;
            $dateEnd = $dateRange['end'] instanceof \DateTime ? $dateRange['end'] :
                    \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']) ;
			$qb->andWhere('d.dateCreation >= :dateDebut')
				->setParameter('dateDebut', $dateStart)
				->andWhere('d.dateCreation <= :dateFin')
				->setParameter('dateFin', $dateEnd);
		}

		if($compta != null){
			$qb->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		if( !is_null($etatDevisSearch) && $type == 'DEVIS' )
		{
			$qb->andWhere('d.etat = :etatDevis')
			   ->setParameter('etatDevis', $etatDevisSearch);
		} else if($etatDevisSearch == null && $type == 'DEVIS'){
			$qb->andWhere('d.etat = :draft or d.etat = :sent')
			->setParameter('draft', 'DRAFT')
			->setParameter('sent', 'SENT');
		}

		if($search != ""){
			$qb->andWhere('d.objet LIKE :search or d.num LIKE :search or c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		if( !is_null($DevisParent) ){
			$qb->andWhere('d.devis = :DevisParent')
			->setParameter('DevisParent', $DevisParent);
		}

		$qb->andWhere('d.type = :type')
		->setParameter('type', $type);

		$qb->setMaxResults($length)
		->setFirstResult($start);

		if($orderBy == 'compte_nom'){
			$qb->addOrderBy('c.nom', $dir);
		} else {
			$qb->addOrderBy('d.'.$orderBy, $dir);
		}
		return $qb->getQuery()->getResult();
	}

	public function countForList($company, $type, $search, $etatDevisSearch = null, $DevisParent = null, $compta=null, $dateRange = ''){
		$qb = $this->createQueryBuilder('d')
		->select('COUNT(d)')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->setParameter('company', $company);
		if( is_array($dateRange) ){
            $dateStart = $dateRange['start'] instanceof \DateTime ? $dateRange['start'] :
                    \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']) ;
            $dateEnd = $dateRange['end'] instanceof \DateTime ? $dateRange['end'] :
                    \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']) ;
			$qb->andWhere('d.dateCreation >= :dateDebut')
				->setParameter('dateDebut', $dateStart)
				->andWhere('d.dateCreation <= :dateFin')
				->setParameter('dateFin', $dateEnd);
		}

		if($compta != null){
			$qb->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		if( !is_null($etatDevisSearch) && $type == 'DEVIS' )
		{
			$qb->andWhere('d.etat = :etatDevis')
			   ->setParameter('etatDevis', $etatDevisSearch);
		}else if($etatDevisSearch == null && $type == 'DEVIS'){
			$qb->andWhere('d.etat = :draft or d.etat = :sent')
			->setParameter('draft', 'DRAFT')
			->setParameter('sent', 'SENT');
		}

		if($search != ""){
			$qb->andWhere('d.objet LIKE :search or d.num LIKE :search or c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		if( !is_null($DevisParent) ){
			$qb->andWhere('d.devis = :DevisParent')
			->setParameter('DevisParent', $DevisParent);
		}

		$qb->andWhere('d.type = :type')
		->setParameter('type', $type);

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function createQueryAndGetResult($arr_filters, $type, $company){

		$query = $this->createQueryBuilder('c')
		->where('c.type = :type')
		->setParameter('type', $type);

		$index=0;

		foreach($arr_filters as $filter){

			$champ = $filter->getChamp();
			$action = $filter->getAction();
			$andor = $filter->getAndor();
			$prefix = 'c';
			//$andor = $arr_filter['andor'];

			if (strpos($champ,'|')) {

				// Foreign Relation
				$arr_table = explode('|',$champ);
				$_table = "AppBundle\\Entity\CRM\\".$arr_table[0];
				$query->innerJoin($_table,'t'.$index, 'WITH', 't'.$index.'.documentPrix = c.id');

				$_champ = $arr_table[1];
				$champ = $_champ;

				$prefix = 't'.$index;
			}

			if (strpos($champ,'*')){
				$arr_table = explode('*',$champ);
				$_champ_0 = $arr_table[0];
				$_champ_1 = $arr_table[1];

				$param = ':valeur'.$index.'0';

				if($action == 'NOT_EQUALS' || $action == 'NOT_CONTAINS'){
					$operateur = 'NOT LIKE';
				} else if ($action == 'MORE_THAN'){
					$operateur = '>';
				} else if($action == 'LESS_THAN'){
					$operateur = '<';
				} else if ($action == 'EQUALS'){
					$operateur = '=';
				}
				$where = '('.$prefix.'.'.$_champ_0.' * '.$prefix.'.'.$_champ_1.') '.$operateur.' '.$param;
				//var_dump($filter->getValeur());
				$query->setParameter($param, $filter->getValeur());

				if($andor == 'AND'){
					$query->andWhere($where);
				} else{
					$query->orWhere($where);
				}


			} else {

				if($action == 'EMPTY'){
					$query->andWhere($prefix.'.'.$champ.' IS NULL' );
				} else if($action == 'NOT_EMPTY'){
					$query->andWhere($prefix.'.'.$champ.' IS NOT NULL' );
				} else {

					$operateur = 'LIKE';

					if($action == 'NOT_EQUALS' || $action == 'NOT_CONTAINS'){
						$operateur = 'NOT LIKE';
					} else if ($action == 'MORE_THAN'){
						$operateur = '>';
					} else if($action == 'LESS_THAN'){
						$operateur = '<';
					}

					$arr_valeurs = explode(',', $filter->getValeur());
					$where = '';

					for($i=0; $i<count($arr_valeurs); $i++){

						$param = ':valeur'.$index.$i;
						$val = '';
						if($action == 'EQUALS' || $action == 'NOT_EQUALS' || $action == 'MORE_THAN' || $action == 'LESS_THAN'){
							$val = $arr_valeurs[$i];
						} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
							$val = '%'.$arr_valeurs[$i].'%';
						} elseif($action == 'BEGINS_WITH'){
							$val = $arr_valeurs[$i].'%';
						} elseif($action == 'ENDS_WITH'){
							$val = '%'.$arr_valeurs[$i];
						}

						if($i != 0){
							$where.=' OR ';
						}
						$where.= $prefix.'.'.$champ.' '.$operateur.' '.$param;
						$query->setParameter($param, $val);

					}
			  }


			  if($andor == 'AND'){
			  	$query->andWhere($where);
			  } else{
			  	$query->orWhere($where);
			  }


			}
			$index++;
		}

		$query->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = c.compte')
		->andWhere('co.company = :company')
		->setParameter('company', $company);

		$result = $query->getQuery()->getResult();

		return $result;
	}

	public function  findForExportEvoliz($company, $num){

		$result = $this->createQueryBuilder('d')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.type = :type')
		->andWhere('d.num >= :num')
		->setParameter('company', $company)
		->setParameter('type', 'FACTURE')
		->setParameter('num', $num)
		->orderBy('d.num', 'ASC')
		->addOrderBy('c.codeEvoliz', 'ASC')
		->getQuery()
		->getResult();

		return $result;
	}

	public function findNoRapprochement($company, $compta=null){

		$queryBuilder  = $this->_em->createQueryBuilder();
		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilderAvoir = $this->_em->createQueryBuilder();
		$subQueryBuilderCheque = $this->_em->createQueryBuilder();
		$subQueryBuilderLettrage = $this->_em->createQueryBuilder();

		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id ');

		$subQueryBuilderAvoir->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id ');

		$subQueryBuilderCheque->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->where('cp.facture = d.id ');

		$subQueryBuilderLettrage->select('IDENTITY(j.facture)')
		->from('AppBundle\Entity\Compta\JournalVente', 'j')
		->where('j.facture = d.id ')
		->andWhere('j.lettrage IS NOT NULL');

		$query = $this->createQueryBuilder('d')
			->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
			->where('c.company = :company')
			->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())))
			->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilderAvoir->getDQL())))
			->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilderCheque->getDQL())))
			->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilderLettrage->getDQL())))
			->andWhere('d.type = :type')
			->setParameter('company', $company)
			->setParameter('type', 'FACTURE')
			->orderBy('d.num', 'ASC');

		if($compta != null){
			$query->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		return $query;
	}

	public function findForCompany($company, $type, $compta = null, $dateRange = null){

		$query = $this->createQueryBuilder('d')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.type = :type')
		->setParameter('company', $company)
		->setParameter('type', $type);

		if( is_array($dateRange) ){
			$dateStart = $dateRange['start'] instanceof \DateTime ? $dateRange['start'] :
								\DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']) ;
			$dateEnd = $dateRange['end'] instanceof \DateTime ? $dateRange['end'] :
							\DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']) ;
			$query->andWhere('d.dateCreation >= :dateDebut')
				->setParameter('dateDebut', $dateStart)
				->andWhere('d.dateCreation <= :dateFin')
				->setParameter('dateFin', $dateEnd);
		}

		if($compta != null){
			$query->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		$query->orderBy('d.num', 'ASC');

		$result = $query->getQuery()->getResult();
		return $result;
	}

	public function findForCompanyByYear($company, $type, $year){

		$query = $this->createQueryBuilder('d')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.type = :type')
		->andWhere('d.dateCreation >= :dateDebut')
		->andWhere('d.dateCreation <= :dateFin')
		->setParameter('company', $company)
		->setParameter('dateDebut', $year.'-01-01')
		->setParameter('dateFin',  $year.'-12-31')
		->setParameter('type', $type);

		$result = $query->getQuery()->getResult();
		return $result;
	}

	public function findForListRetard($company, $type, $length, $start, $orderBy, $dir, $search, $compta=null){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		//ne pas prendre les factures qui sont dans une remise de cheque rapprochée
		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		//ne pas prendre les factures qui ont des avoirs
		$avoirSubQueryBuilder = $this->_em->createQueryBuilder();
		$avoirSubQueryBuilder->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id');

		$query = $this->createQueryBuilder('d');
		$query->select('d.id', 'd.objet', 'd.num', 'd.dateCreation', 'd.dateValidite', 'c.nom as compte_nom', 'c.id as compte_id', 're.num as num_relance')
			->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
			->leftJoin('AppBundle\Entity\Compta\Relance', 're', 'WITH', 'c.id = re.facture')
			->where('c.company = :company')
			->andWhere('d.dateValidite <= :now')
			->andWhere('d.etat <> :etat')
			->setParameter('company', $company)
			->setParameter('now', new \DateTime('yesterday'))
			->setParameter('etat', 'PAID');

		if($compta != null){
			$query->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		if($search != ""){
			$query->andWhere('d.objet LIKE :search or d.num LIKE :search or c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		$query->andWhere('d.type = :type')
		->setParameter('type', $type);

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($avoirSubQueryBuilder->getDQL())));

		$query->setMaxResults($length)
		->setFirstResult($start)
		->addOrderBy('d.'.$orderBy, $dir);

		return $query->getQuery()->getResult();
	}

	public function countForListRetard($company, $type, $search, $compta=null){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		$query = $this->createQueryBuilder('d');
		$query->select('COUNT(d)')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.dateValidite <= :now')
		->andWhere('d.etat <> :etat')
		->setParameter('company', $company)
		->setParameter('now', new \DateTime('yesterday'))
		->setParameter('etat', 'PAID');

		if($compta != null){
			$query->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		if($search != ""){
			$query->andWhere('d.objet LIKE :search or d.num LIKE :search or c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		$query->andWhere('d.type = :type')
		->setParameter('type', $type);

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));

		return $query->getQuery()->getSingleScalarResult();
	}

	public function findForListEcheance($company, $type, $length, $start, $orderBy, $dir, $search, $compta=null){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		$today = new \DateTime(date('Y-m-d'));

		$query = $this->createQueryBuilder('d');
		$query->select('d.id', 'd.objet', 'd.num', 'd.dateCreation', 'c.nom as compte_nom', 'c.id as compte_id', 'd.dateValidite')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.dateValidite >= :today')
		->setParameter('company', $company)
		->setParameter('today', $today);

		//ne pas prendre les factures dans des remises de chèques rapprochées
		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		//ne pas prendre les factures qui ont des avoirs
		$avoirSubQueryBuilder = $this->_em->createQueryBuilder();
		$avoirSubQueryBuilder->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id');

		if($compta != null){
			$query->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		if($search != ""){
			$query->andWhere('d.objet LIKE :search or d.num LIKE :search or c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		$query->andWhere('d.type = :type')
		->setParameter('type', $type);

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($avoirSubQueryBuilder->getDQL())));

		$query->setMaxResults($length)
		->setFirstResult($start)
		->addOrderBy('d.'.$orderBy, $dir);

		return $query->getQuery()->getResult();
	}

	public function countForListEcheance($company, $type, $search, $compta=null){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		$query = $this->createQueryBuilder('d');
		$query->select('COUNT(d)')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.compta = :compta')
		->andWhere('d.dateValidite >= :now')
		->setParameter('company', $company)
		->setParameter('compta', $compta)
		->setParameter('now', new \DateTime('now'));

		if($compta != null){
			$query->andWhere('d.compta = :compta')
			->setParameter('compta', $compta);
		}

		if($search != ""){
			$query->andWhere('d.objet LIKE :search or d.num LIKE :search or c.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		$query->andWhere('d.type = :type')
		->setParameter('type', $type);

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));

		return $query->getQuery()->getSingleScalarResult();
	}

	public function findFacturesEcheance($company){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		//ne pas prendre les factures qui ont des avoirs
		$avoirSubQueryBuilder = $this->_em->createQueryBuilder();
		$avoirSubQueryBuilder->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id');

		$query = $this->createQueryBuilder('d')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.type = :type')
		->andWhere('d.dateValidite >= :now')
		->setParameter('company', $company)
		->setParameter('now', new \DateTime('now'))
		->andWhere('d.compta = :compta')
		->setParameter('compta', true)
		->setParameter('type', 'FACTURE');

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($avoirSubQueryBuilder->getDQL())));

		return $query->getQuery()->getResult();
	}

	public function findFacturesNonPayees($compte){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
			->from('AppBundle\Entity\Compta\Rapprochement', 'r')
			->where('r.facture = d.id');

		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		//ne pas prendre les factures qui ont des avoirs
		$avoirSubQueryBuilder = $this->_em->createQueryBuilder();
		$avoirSubQueryBuilder->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id');


		$query = $this->createQueryBuilder('d');
		$query->select()
			->where('d.compte = :compte')
			->andWhere('d.dateValidite <= :yesterday')
			->andWhere('d.type = :type')
			->andWhere('d.compta = :compta')
			->setParameter('compte', $compte)
			->setParameter('yesterday', new \DateTime('yesterday'))
			->setParameter('type', 'FACTURE')
			->setParameter('compta', true);

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($avoirSubQueryBuilder->getDQL())));


		$query->addOrderBy('d.num', 'ASC');

		return $query->getQuery()->getResult();



	}

	public function findFacturesRetard($compte){

		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		//ne pas prendre les factures qui ont des avoirs
		$avoirSubQueryBuilder = $this->_em->createQueryBuilder();
		$avoirSubQueryBuilder->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id');

		$query = $this->createQueryBuilder('d')
		->where('d.compte = :compte')
		->andWhere('d.dateValidite <= :now')
		->andWhere('d.compta = :compta')
		->setParameter('compte', $compte)
		->setParameter('now', new \DateTime('yesterday'))
		->setParameter('compta', true);

		$query->andWhere('d.type = :type')
		->setParameter('type', 'FACTURE');

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($avoirSubQueryBuilder->getDQL())));


		$query->addOrderBy('d.num', 'ASC');

		return $query->getQuery()->getResult();
	}

	public function findFacturesRetardByCompany($company){
		$queryBuilder  = $this->_em->createQueryBuilder();

		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(r.facture)')
		->from('AppBundle\Entity\Compta\Rapprochement', 'r')
		->where('r.facture = d.id');

		$chequeSubQueryBuilder = $this->_em->createQueryBuilder();
		$chequeSubQueryBuilder->select('IDENTITY(cp.facture)')
		->from('AppBundle\Entity\Compta\ChequePiece', 'cp')
		->innerJoin('AppBundle\Entity\Compta\Cheque', 'ch', 'WITH', 'cp.cheque = ch.id')
		->innerJoin('AppBundle\Entity\Compta\Rapprochement', 'rp', 'WITH', 'rp.remiseCheque = ch.remiseCheque')
		->where('cp.facture = d.id');

		//ne pas prendre les factures qui ont des avoirs
		$avoirSubQueryBuilder = $this->_em->createQueryBuilder();
		$avoirSubQueryBuilder->select('IDENTITY(a.facture)')
		->from('AppBundle\Entity\Compta\Avoir', 'a')
		->where('a.facture = d.id');

		//ne pas prendre les factures qui sont lettrées
		$lettrageSubQueryBuilder = $this->_em->createQueryBuilder();
		$lettrageSubQueryBuilder->select('IDENTITY(jv.facture)')
		->from('AppBundle\Entity\Compta\JournalVente', 'jv')
		->where('jv.facture = d.id')
		->andWhere('jv.lettrage IS NOT NULL');

		$query = $this->createQueryBuilder('d')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.dateValidite <= :now')
		->andWhere('d.compta = :compta')
		->andWhere('d.etat <> :etat')
		->setParameter('company', $company)
		->setParameter('compta', true)
		->setParameter('now', new \DateTime('yesterday'))
		->setParameter('etat', 'PAID');
		$query->andWhere('d.type = :type')
		->setParameter('type', 'FACTURE');

		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($subQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($chequeSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($avoirSubQueryBuilder->getDQL())));
		$query->andWhere($queryBuilder->expr()->not($queryBuilder->expr()->exists($lettrageSubQueryBuilder->getDQL())));

		$query->addOrderBy('d.num', 'ASC');

		return $query->getQuery()->getResult();
	}

	public function findMaxNumForYear($type, $year, $company){
		$query = $this->createQueryBuilder('d')
		->select('MAX(d.num)')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.type = :type')
		->andWhere('d.dateCreation >= :first')
		->andWhere('d.dateCreation <= :last')
		->setParameter('company', $company)
		->setParameter('type', $type)
		->setParameter('first', $year.'-01-01')
		->setParameter('last', $year.'-12-31');

		$result = $query->getQuery()->getSingleScalarResult();

		return $result;
	}

	public function findForPeriodeEngagement($company, $mois, $annee){

		$query = $this->createQueryBuilder('d')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c', 'WITH', 'c.id = d.compte')
		->where('c.company = :company')
		->andWhere('d.type = :type')
		->andWhere('d.dateCreation >= :first')
		->andWhere('d.dateCreation <= :last')
		->setParameter('company', $company)
		->setParameter('type', 'FACTURE')
		->setParameter('first', $annee.'-'.$mois.'-01')
		->setParameter('last',  $annee.'-'.$mois.'-31');

		$result = $query->getQuery()->getResult();

		return $result;
	}

}
