<?php

namespace AppBundle\Entity\CRM;

use Doctrine\ORM\EntityRepository;

/**
 * ContactWebFormRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactWebFormRepository extends EntityRepository
{
	
	
	public function count($company){
		$result = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		->where('c.company = :company')
		->setParameter('company', $company)
		->getQuery()
		->getSingleScalarResult();
	
		return $result;
	}
	
	public function findByCompany($company){
		$result = $this->createQueryBuilder('c')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = c.compte')
		->where('co.company = :company')
		->setParameter('company', $company)
		->getQuery()
		->getResult();
	
		return $result;
	}
	
	public function findAllExcept($ids = array(), $company, $compte = null){
		$qb = $this->createQueryBuilder('c')
				->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = c.compte')
				->where('co.company = :company')
				->setParameter('company', $company);

		if( count($ids) > 0 )
		{
			$qb->andWhere('c.id NOT IN (:ids)')
			   ->setParameter('ids', implode(',',$ids));
		}
		if( !is_null($compte) )
		{
			$qb->andWhere('c.compte = :compte')
			   ->setParameter('compte', $compte);
		}
		//~ ->getQuery()
		//~ ->getResult();
	//~ var_dump($qb->getParameters()); exit;
		return $qb->getQuery()->getResult();
	}
	
	public function findByCompanyAndCompte($company, $compte){
		$result = $this->createQueryBuilder('c')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = c.compte')
		->where('co.company = :company')
		->andWhere('c.compte = :compte')
		->setParameter('company', $company)
		->setParameter('compte', $compte)
		->getQuery()
		->getResult();
	
		return $result;
	}
	
	public function findAllNoImpulsion(){
		
		$queryBuilder  = $this->_em->createQueryBuilder();
		$subQueryBuilder = $this->_em->createQueryBuilder();
		$subQueryBuilder->select('IDENTITY(i.contact)')
		->from('AppBundle\Entity\CRM\Impulsion', 'i');
		
		$query = $this->createQueryBuilder('c');
		$query->where(($queryBuilder->expr()->notIn('c', $subQueryBuilder->getDQL())));
		
		$result = $query->getQuery()->getResult();
		
		return $result;
	}
	
	public function findForList($company, $length, $start, $orderBy, $dir, $search){
		$qb = $this->createQueryBuilder('c')
		//~ ->select('c.id', 'c.prenom', 'c.nom', 'co.nom as compte_nom', 'co.id as compte_id', 'c.titre', 'c.telephoneFixe', 'c.telephonePortable', 'c.email', 'c.ville', 'c.region', 'c.pays')
		//~ ->leftJoin('AppBundle\Entity\CRM\Compte', 'co', 'WITH', 'co.id = c.compte')
		->select('c.id', 'c.nomFormulaire', 'c.dateCreation')
		->where('c.company = :company')
		->setParameter('company', $company);
		
		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nomFormulaire LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}
		
		//~ echo "hich"; exit;
		$qb->setMaxResults($length)
		->setFirstResult($start)
		->addOrderBy('c.'.$orderBy, $dir);
		//~ print_r(array(
    //~ 'sql'        => $qb->getQuery()->getSQL(),
    //~ 'parameters' => $qb->getQuery()->getParameters(),
//~ ));
	//~ var_dump($qb->getQuery()->getResult());
		return $qb->getQuery()->getResult();
	}
	
	public function countForList($company, $search){
		$qb = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		->where('c.company = :company')
		->setParameter('company', $company);
	
		
		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nomFormulaire LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}
	
		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function createQueryAndGetResult($arr_filters){
	
		$qb  = $this->_em->createQueryBuilder();
		
		$query = $this->createQueryBuilder('c')
		->join('c.settings', 's');
	
		$index=0;
	
		foreach($arr_filters as $filter){
			
			$champ = $filter->getChamp();			
			$action = $filter->getAction();
			$andor = $filter->getAndor();
			
			$operateur = 'LIKE';
				
			if($action == 'NOT_EQUALS' || $action == 'NOT_CONTAINS'){
				$operateur = 'NOT LIKE';
			}
				
			$arr_valeurs = explode(',', $filter->getValeur());
			
			$where = '';
			
			if($champ == 'TYPE' || $champ == 'THEME_INTERET' || $champ == 'SERVICE_INTERET'){

				if($action == 'EMPTY'){

					$subQueryBuilder = $this->getEntityManager()->createQueryBuilder();
					$subQuery = $subQueryBuilder
					->select(['cs.id'])
					->from('AppBundle\Entity\CRM\Contact', 'cs')
					->innerJoin('cs.settings', 's')
					->where('s.parametre = :parameter')
					->setParameter('parameter', $champ)
					->getQuery()
					->getArrayResult();
										
					if($index == 0){
						$query->where($qb->expr()->notIn('c.id', ':subQuery'))
								->setParameter('subQuery', $subQuery);
					} else {
						if($andor == 'AND'){
							$query->andWhere($qb->expr()->notIn('c.id', ':subQuery'))
							->setParameter('subQuery', $subQuery);
						} else{
							$query->orWhere($qb->expr()->notIn('c.id', ':subQuery'))
							->setParameter('subQuery', $subQuery);
						}
					}
					
					
				} else if($action == 'NOT_EMPTY'){
					$qb2 = $qb;
					$qb2->select('s'.$index.'.id')
					->from('AppBundle\Entity\Settings', 's'.$index)
					->where('s'.$index.'.parametre = :parametre'.$index);
					
					$query->setParameter('parametre'.$index, $champ);
					
					if($index == 0){
						$query->where(($qb->expr()->in('s', $qb2->getDQL())));
					} else {
						if($andor == 'AND'){
							$query->andWhere(($qb->expr()->in('c.settings', $qb2->getDQL())));
						} else{
							$query->orWhere(($qb->expr()->in('c.settings', $qb2->getDQL())));
						}
					}
				}  else {
 			
					$where = 's.parametre = :param'.$index;
					$query->setParameter('param'.$index, $champ);
					
					$where.=' AND ';
					
 					for($i=0; $i<count($arr_valeurs); $i++){
 				
 						$param = ':valeur'.$index.$i;
 				
 						$val = '';
 						if($action == 'EQUALS' || $action == 'NOT_EQUALS'){
 							$val = $arr_valeurs[$i];
 						} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
 							$val = '%'.$arr_valeurs[$i].'%';
 						} elseif($action == 'BEGINS_WITH'){
 							$val = $arr_valeurs[$i].'%';
 						} elseif($action == 'ENDS_WITH'){
 							$val = '%'.$arr_valeurs[$i];
 						}
 		
 						if($i != 0){
 							$where.=' OR ';
 						}
 						$where.= 's.valeur '.$operateur.' '.$param;
 						$query->setParameter($param, $val);
 					}
 					
 					if($index == 0){
 						$query->andWhere($where);
 					} else {
 						if($andor == 'AND'){
 							$query->andWhere($where);
 						} else{
 							$query->orWhere($where);
 						}
 					}

				}
 
 			} elseif( $champ == 'RESEAU' || $champ == 'ORIGINE') {
 				
 				if($action == 'EMPTY'){
 					$query->where('c.'.strtolower($champ).' IS NULL' );
 				} else if($action == 'NOT_EMPTY'){
 					$query->where('c.'.strtolower($champ).' IS NOT NULL');
 				
 				} else {
 				
	 				for($i=0; $i<count($arr_valeurs); $i++){
	 						
	 					$param = ':valeur'.$index.$i;
	 						
	 					$val = '';
	 					if($action == 'EQUALS' || $action == 'NOT_EQUALS'){
	 						$val = $arr_valeurs[0];
	 					} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
	 						$val = '%'.$arr_valeurs[0].'%';
	 					} elseif($action == 'BEGINS_WITH'){
	 						$val = $arr_valeurs[0].'%';
	 					} elseif($action == 'ENDS_WITH'){
	 						$val = '%'.$arr_valeurs[0];
	 					}
	 						
	 					if($i != 0){
	 						$where.=' OR ';
						}
	 				
						$qb2 = $qb;
	 					$qb2->select('s'.$index.'.id')
	 					->from('AppBundle\Entity\Settings', 's'.$index)
	 					->where('s'.$index.'.parametre = :parametre'.$index)
	 					->andWhere('s'.$index.'.valeur LIKE :valeur'.$index);
	 					
		 				$query->setParameter('parametre'.$index, $champ)
		 				->setParameter('valeur'.$index, $val);
		
	 				}
	 				
	 				if($index == 0){
	 					$query->where(($qb->expr()->in('c.'.strtolower($champ), $qb2->getDQL())));
	 				} else {
	 					if($andor == 'AND'){
	 						$query->andWhere(($qb->expr()->in('c.'.strtolower($champ), $qb2->getDQL())));
	 					} else{
	 						$query->orWhere(($qb->expr()->in('c.'.strtolower($champ), $qb2->getDQL())));
	 					}
	 				}
 				}
 				
 			} else {
 				
				if($action == 'EMPTY'){
					$query->where('c.'.$champ.' IS NULL' );
				} else if($action == 'NOT_EMPTY'){
					$query->where('c.'.$champ.' IS NOT NULL');
	
				} else {
		
					for($i=0; $i<count($arr_valeurs); $i++){
							
						$param = ':valeur'.$index.$i;
						$val = '';
						if($action == 'EQUALS' || $action == 'NOT_EQUALS'){
							$val = $arr_valeurs[$i];
						} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
							$val = '%'.$arr_valeurs[$i].'%';
						} elseif($action == 'BEGINS_WITH'){
							$val = $arr_valeurs[$i].'%';
						} elseif($action == 'ENDS_WITH'){
							$val = '%'.$arr_valeurs[$i];
						}
							
						if($i != 0){
							$where.=' OR ';
						}
						
						$where.= 'c.'.$champ.' '.$operateur.' '.$param;
						$query->setParameter($param, $val);
					}
		
					if($index == 0){
						$query->where($where);
					} else {
						if($andor == 'AND'){
							$query->andWhere($where);
						} else{
							$query->orWhere($where);
						}
					}
		
				}
				
 			}
 			$index++;
		}

		$result = $query->getQuery()->getResult();
	
		return $result;
	}
	
	
	
	
}
