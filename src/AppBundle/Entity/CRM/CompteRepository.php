<?php

namespace AppBundle\Entity\CRM;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\CRM\Compte;
use AppBundle\Entity\Company;

/**
 * CompteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompteRepository extends EntityRepository
{
	public function count($company){
		$result = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		->where('c.company = :company')
		->setParameter('company', $company)
		->getQuery()
		->getSingleScalarResult();

		return $result;
	}

	public function findForList($company, $length, $start, $orderBy, $dir, $search){
		$qb = $this->createQueryBuilder('c')
			->select('c.id', 'c.nom', 'c.ville', 'c.pays', 'c.telephone','c.region')
			//~ ->innerJoin('AppBundle\Entity\CRM\Contact', 'co', 'WITH', 'co.compte = c.id')
			->where('c.company = :company')
			->setParameter('company', $company);

		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nom LIKE :search or c.region LIKE :search or c.ville LIKE :search or c.pays LIKE :search or c.telephone LIKE :search')
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.nom',
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.prenom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.prenom',
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.nom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			->setParameter('search', '%'.$search.'%');
		}

		$qb->setMaxResults($length)
	        ->setFirstResult($start)
	        ->addOrderBy('c.'.$orderBy, $dir);

		return $qb->getQuery()->getResult();
	}

	public function countForList($company, $search){
		$qb = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		//~ ->leftJoin('AppBundle\Entity\CRM\Contact', 'co', 'WITH', 'co.compte = c.id')
		->where('c.company = :company')
		->setParameter('company', $company);

		if($search != ""){

			$qb->andWhere('c.nom LIKE :search')
			->orWhere('c.region LIKE :search')
			->orWhere('c.ville LIKE :search')
			->orWhere('c.pays LIKE :search')
			->orWhere('c.telephone LIKE :search')
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.nom',
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.prenom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			//~ ->orWhere($qb->expr()->like(
						//~ $qb->expr()->concat(
							//~ 'co.prenom',
						//~ $qb->expr()->concat(
								//~ $qb->expr()->literal(' '), 'co.nom')),
								//~ $qb->expr()->literal('%'.$search.'%')))
			->setParameter('search', '%'.$search.'%');
		}

//\Doctrine\Common\Util\Debug::dump($qb->getQuery()->getSql());
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findForListClient($company, $length, $start, $orderBy, $dir, $search){
		$qb = $this->createQueryBuilder('c')
		->select('c.id', 'c.nom', 'c.ville', 'c.pays', 'c.telephone','c.region', 'cc.num as num_compte_comptable', 'cc.id as id_compte_comptable')
		->leftJoin('AppBundle:Compta\CompteComptable', 'cc', 'WITH', 'cc.id = c.compteComptableClient')
		->where('c.company = :company')
		->andWhere('c.client = true')
		->setParameter('company', $company);

		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nom LIKE :search')
			->orWhere('c.region LIKE :search')
			->orWhere('c.ville LIKE :search')
			->orWhere('c.pays LIKE :search')
			->orWhere('c.telephone LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}


		if($orderBy != 'total' && $orderBy != 'total_annee'){
			$qb->setMaxResults($length)
			->setFirstResult($start)
			->addOrderBy('c.'.$orderBy, $dir);
		}
		

		return $qb->getQuery()->getResult();
	}

	public function countForListClient($company, $search){
		$qb = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		->where('c.company = :company')
		->andWhere('c.client = true')
		->setParameter('company', $company);

		if($search != ""){

			$qb->andWhere('c.nom LIKE :search')
			->orWhere('c.region LIKE :search')
			->orWhere('c.ville LIKE :search')
			->orWhere('c.pays LIKE :search')
			->orWhere('c.telephone LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findForListFournisseur($company, $length, $start, $orderBy, $dir, $search, $year){
		$qb = $this->createQueryBuilder('c')
		->select('c.id', 'c.nom', 'c.ville', 'c.pays', 'c.telephone','c.region', 'cc.num as num_compte_comptable', 'cc.id as id_compte_comptable')
		->leftJoin('AppBundle:Compta\CompteComptable', 'cc', 'WITH', 'cc.id = c.compteComptableFournisseur')
		->leftJoin('AppBundle:Compta\Depense', 'd', 'WITH', 'd.compte = c.id')
		->where('c.company = :company')
		->andWhere('c.fournisseur = true')
		->setParameter('company', $company);

		if($search != ""){
			$search = trim($search);
			$qb->andWhere('c.nom LIKE :search OR c.region LIKE :search OR c.ville LIKE :search OR c.pays LIKE :search OR c.telephone LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		if($year == "true"){
			$currentYear = new \DateTime(date('d-m-Y'));

			$qb->andWhere('d.date >= :startDate AND d.date <= :endDate')
			->setParameter('startDate', $currentYear->format('Y').'-01-01')
			->setParameter('endDate', $currentYear->format('Y').'-12-31');
		}

		$qb->setMaxResults($length)
		->setFirstResult($start)
		->addOrderBy('c.'.$orderBy, $dir)
		->groupBy('c.id');

		return $qb->getQuery()->getResult();
	}

	public function countForListFournisseur($company, $search, $year){
		$qb = $this->createQueryBuilder('c')
		->select('COUNT(c)')
		->leftJoin('AppBundle:Compta\Depense', 'd', 'WITH', 'd.compte = c.id')
		->where('c.company = :company')
		->andWhere('c.fournisseur = true')
		->setParameter('company', $company);

		if($search != ""){

			$qb->andWhere('c.nom LIKE :search OR c.region LIKE :search OR c.ville LIKE :search OR c.pays LIKE :search OR c.telephone LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		if($year == "true"){
			$currentYear = new \DateTime(date('d-m-Y'));

			$qb->andWhere('d.date >= :startDate AND d.date <= :endDate')
			->setParameter('startDate', $currentYear->format('Y').'-01-01')
			->setParameter('endDate', $currentYear->format('Y').'-12-31');
		}

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function findAllExcept($id = 0){

		$qb = $this->createQueryBuilder('u');
		$qb->where('u.id != :identifier')
		   ->setParameter('identifier', $id);

		return $qb->getQuery()
			  ->getResult();
	}

	public function createQueryAndGetResult($arr_filters, $company){

		$query = $this->createQueryBuilder('c');

		$index=0;

		foreach($arr_filters as $filter){

			$champ = $filter->getChamp();
			$action = $filter->getAction();
			$andor = $filter->getAndor();

			if($action == 'EMPTY'){
				if($index == 0){
					$query->where('c.'.$champ.' IS NULL' );
				} else {
					if($andor == 'AND'){
						$query->andWhere('c.'.$champ.' IS NULL' );
					} else{
						$query->orWhere('c.'.$champ.' IS NULL' );
					}
				}
			} else if($action == 'NOT_EMPTY'){
				if($index == 0){
					$query->where('c.'.$champ.' IS NOT NULL' );
				} else {
					if($andor == 'AND'){
						$query->andWhere('c.'.$champ.' IS NOT NULL' );
					} else{
						$query->orWhere('c.'.$champ.' IS NOT NULL' );
					}
				}
			} else {

				$operateur = 'LIKE';

				if($action == 'NOT_EQUALS' || $action == 'NOT_CONTAINS'){
					$operateur = 'NOT LIKE';
				}

				$arr_valeurs = explode(',', $filter->getValeur());
				$where = '';

				for($i=0; $i<count($arr_valeurs); $i++){

					$param = ':valeur'.$index.$i;

					$val = '';
					if($action == 'EQUALS' || $action == 'NOT_EQUALS'){
						$val = $arr_valeurs[$i];
					} elseif($action == 'CONTAINS' || $action == 'NOT_CONTAINS'){
						$val = '%'.$arr_valeurs[$i].'%';
					} elseif($action == 'BEGINS_WITH'){
						$val = $arr_valeurs[$i].'%';
					} elseif($action == 'ENDS_WITH'){
						$val = '%'.$arr_valeurs[$i];
					}

					if($i != 0){
						$where.=' OR ';
					}
					$where.= 'c.'.$champ.' '.$operateur.' '.$param;
					$query->setParameter($param, $val);

				}

				if($index == 0){
					$query->where($where);
				} else {
					if($andor == 'AND'){
						$query->andWhere($where);
					} else{
						$query->orWhere($where);
					}
				}

			}
			$index++;
		}

		$query->andWhere('c.company = :company')
		->setParameter('company', $company);

		$result = $query->getQuery()->getResult();

		return $result;
	}

	public function findAllCodesEvoliz(){
		$qb = $this->createQueryBuilder('c')
		->select('c.codeEvoliz')
		->where('c.codeEvoliz is not null');

		return $qb->getQuery()->getResult();
	}
    
    /**
     * Trouver des Comptes Ã  fusionner
     * 
     * @param Company $company
     * @param Compte $compte
     * @param string $search
     * @param string $orderBy
     * @param string $dir 'DESC'|'ASC'
     * 
     * @return Compte[]
     */
	public function findForMerge(Company $company, Compte $compte, $search, $orderBy = null, $dir = 'DESC'){
		$qb = $this->createQueryBuilder('c')
			->where('c.company = :company')
            ->andWhere('c.nom LIKE :search')
            ->andWhere('c != :compte')
			->setParameters(['company' => $company, 'search' => '%'.$search.'%', 'compte' => $compte]);
        if($orderBy){
            $qb->addOrderBy($orderBy, $dir === 'DESC' ? $dir : 'ASC');
        }

		return $qb->getQuery()->getResult();
	}    

}
