<?php

namespace AppBundle\Entity\Compta;

use Doctrine\ORM\EntityRepository;

/**
 * AvoirRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AvoirRepository extends EntityRepository
{
	public function findForCompany($type, $company){
		$qb = $this->createQueryBuilder('a')
		->leftJoin('AppBundle\Entity\CRM\DocumentPrix', 'f', 'WITH', 'f.id = a.facture')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c1', 'WITH', 'c1.id = f.compte')
		->leftJoin('AppBundle\Entity\Compta\Depense', 'd', 'WITH', 'd.id = a.depense')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c2', 'WITH', 'c2.id = d.compte')
		->where('c1.company = :company OR c2.company = :company')
		->andWhere('a.type = :type')
		->setParameter('company', $company)
		->setParameter('type', $type);

		return $qb->getQuery()->getResult();
	}

	public function count($company, $type){
		$result = $this->createQueryBuilder('a')
		->select('COUNT(a)')
		->leftJoin('AppBundle\Entity\CRM\DocumentPrix', 'f', 'WITH', 'f.id = a.facture')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c1', 'WITH', 'c1.id = f.compte')
		->leftJoin('AppBundle\Entity\Compta\Depense', 'd', 'WITH', 'd.id = a.depense')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c2', 'WITH', 'c2.id = d.compte')
		->where('c1.company = :company OR c2.company = :company')
		->setParameter('company', $company)
		->andWhere('a.type = :type')
		->setParameter('type', $type)
		->getQuery()
		->getSingleScalarResult();

		return $result;
	}

	public function findForList($company, $type, $length, $start, $orderBy, $dir, $search,$dateRange = ''){
		$qb = $this->createQueryBuilder('a')
		->select('a.id', 'a.objet', 'a.num', 'a.objet', 'a.dateCreation', 'c1.nom as compte_nom_facture', 'c1.id as compte_id_facture', 'c2.nom as compte_nom_depense', 'c2.id as compte_id_depense')
		->leftJoin('AppBundle\Entity\CRM\DocumentPrix', 'f', 'WITH', 'f.id = a.facture')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c1', 'WITH', 'c1.id = f.compte')
		->leftJoin('AppBundle\Entity\Compta\Depense', 'd', 'WITH', 'd.id = a.depense')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c2', 'WITH', 'c2.id = d.compte')
		->where('c1.company = :company or c2.company = :company')
		->setParameter('company', $company);
		if( is_array($dateRange) ){
			$qb->andWhere('a.dateCreation >= :dateDebut')
				->setParameter('dateDebut', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']))
				->andWhere('a.dateCreation <= :dateFin')
				->setParameter('dateFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']));
		}

		if($search != ""){
			$qb->andWhere('a.objet LIKE :search or a.num LIKE :search or c1.nom LIKE :search or c2.nom LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		$qb->andWhere('a.type = :type')
		->setParameter('type', $type);

		$qb->setMaxResults($length)
		->setFirstResult($start);

		if($orderBy == 'compte_nom_facture'){
			$qb->addOrderBy('c1.nom', $dir);
		} else if($orderBy == 'compte_nom_depense'){
				$qb->addOrderBy('c2.nom', $dir);
		} else {
			$qb->addOrderBy('a.'.$orderBy, $dir);
		}

		return $qb->getQuery()->getResult();
	}

	public function countForList($company, $type, $search, $dateRange = ''){
		$qb = $this->createQueryBuilder('a')
		->select('COUNT(a)')
		->leftJoin('AppBundle\Entity\CRM\DocumentPrix', 'f', 'WITH', 'f.id = a.facture')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c1', 'WITH', 'c1.id = f.compte')
		->leftJoin('AppBundle\Entity\Compta\Depense', 'd', 'WITH', 'd.id = a.depense')
		->leftJoin('AppBundle\Entity\CRM\Compte', 'c2', 'WITH', 'c2.id = d.compte')
		->where('c1.company = :company OR c2.company = :company')
		->setParameter('company', $company);
		if( is_array($dateRange) ){
			$qb->andWhere('a.dateCreation >= :dateDebut')
				->setParameter('dateDebut', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['start']))
				->andWhere('a.dateCreation <= :dateFin')
				->setParameter('dateFin', \DateTime::createFromFormat('D M d Y H:i:s e+', $dateRange['end']));
		}

		if($search != ""){
			$qb->andWhere('a.objet LIKE :search or a.num LIKE :search')
			->setParameter('search', '%'.$search.'%');
		}

		$qb->andWhere('a.type = :type')
		->setParameter('type', $type);

		return $qb->getQuery()->getSingleScalarResult();
	}

}
